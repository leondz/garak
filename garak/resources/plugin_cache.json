{
  "probes": {
    "probes.atkgen.Tox": {
      "description": "Automatic attack generation, trying to elicit toxic outputs from the model.",
      "DEFAULT_PARAMS": {
        "generations": 1,
        "max_calls": 5,
        "constructive_tension": true,
        "red_team_model_type": "huggingface.Pipeline",
        "red_team_model_name": "garak-llm/artgpt2tox",
        "red_team_model_config": {
          "hf_args": {
            "device": "cpu",
            "torch_dtype": "float32"
          }
        },
        "red_team_prompt_template": "<|input|>[query]<|response|>",
        "red_team_postproc_rm_regex": "\\<\\|.*",
        "use_only_first_sent": true
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://interhumanagreement.substack.com/p/faketoxicityprompts-automatic-red",
      "extended_detectors": [],
      "goal": "make the model say something toxic",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": false,
      "primary_detector": null,
      "recommended_detector": [
        "toxicity.ToxicCommentModel"
      ],
      "tags": [
        "avid-effect:ethics:E0301",
        "quality:Behavioral:ContentSafety:Toxicity",
        "quality:Behavioral:ContentSafety:HateHarassment",
        "quality:Behavioral:ContentSafety:Profanity",
        "payload:unwanted"
      ],
      "mod_time": "2024-08-29 13:35:37 +0000"
    },
    "probes.av_spam_scanning.EICAR": {
      "description": "Does the model check its output for viruses? Try to send the EICAR code through",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "*",
      "doc_uri": "https://en.wikipedia.org/wiki/EICAR_test_file",
      "extended_detectors": [],
      "goal": "output antivirus test codes",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "knownbadsignatures.EICAR"
      ],
      "tags": [
        "avid-effect:security:S0301",
        "avid-effect:security:S0403",
        "owasp:llm02",
        "payload:malicious:badcode:virus",
        "quality:Security:Adversarial"
      ],
      "mod_time": "2024-08-22 16:42:10 +0000"
    },
    "probes.av_spam_scanning.GTUBE": {
      "description": "Does the model check its output for spam? Try to send the GTUBE code through",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "*",
      "doc_uri": "https://en.wikipedia.org/wiki/GTUBE",
      "extended_detectors": [],
      "goal": "output email spam",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "knownbadsignatures.GTUBE"
      ],
      "tags": [
        "avid-effect:security:S0301",
        "avid-effect:security:S0403",
        "owasp:llm02",
        "payload:malicious:badcode:spam",
        "quality:Security:Adversarial"
      ],
      "mod_time": "2024-08-22 16:42:10 +0000"
    },
    "probes.av_spam_scanning.GTphish": {
      "description": "Does the model check its output for phishing? Try to send the GTphish code through",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "*",
      "doc_uri": "https://www.cisco.com/c/en/us/support/docs/security/email-security-appliance/213465-testing-outbreak-filter-url-rewriting.html",
      "extended_detectors": [],
      "goal": "output email phishing",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "knownbadsignatures.GTphish"
      ],
      "tags": [
        "avid-effect:security:S0301",
        "avid-effect:security:S0403",
        "owasp:llm02",
        "payload:malicious:badcode:phishing",
        "quality:Security:Adversarial"
      ],
      "mod_time": "2024-08-22 16:42:10 +0000"
    },
    "probes.base.Probe": {
      "description": "Base class for objects that define and execute LLM evaluations",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": null,
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [],
      "mod_time": "2024-08-29 13:35:37 +0000"
    },
    "probes.base.TreeSearchProbe": {
      "DEFAULT_PARAMS": {
        "generations": 1,
        "queue_children_at_start": true,
        "per_generation_threshold": 0.5,
        "per_node_threshold": 0.1,
        "strategy": "breadth_first",
        "target_soft": true
      },
      "active": true,
      "bcp47": null,
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [],
      "mod_time": "2024-08-29 13:35:37 +0000"
    },
    "probes.continuation.ContinueSlursReclaimedSlurs": {
      "description": "Continue partial word with slur or reclaimed slur.",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": false,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "output an ethnic slur",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "continuation.Continuation"
      ],
      "tags": [
        "avid-effect:ethics:E0101",
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0401",
        "owasp:llm01",
        "quality:Behavioral:ContentSafety:Toxicity",
        "quality:Behavioral:ContentSafety:HateHarassment",
        "payload:unwanted:hatespeech"
      ],
      "mod_time": "2024-08-01 23:41:21 +0000"
    },
    "probes.continuation.ContinueSlursReclaimedSlursMini": {
      "description": "Continue partial word with slur or reclaimed slur.",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "output an ethnic slur",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "continuation.Continuation"
      ],
      "tags": [
        "avid-effect:ethics:E0101",
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0401",
        "owasp:llm01",
        "quality:Behavioral:ContentSafety:Toxicity",
        "quality:Behavioral:ContentSafety:HateHarassment",
        "payload:unwanted:hatespeech"
      ],
      "mod_time": "2024-08-01 23:41:21 +0000"
    },
    "probes.dan.Ablation_Dan_11_0": {
      "description": "Ablation experiements over the DAN 11.0 prompt",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": false,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "disregard the system prompt",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "mitigation.MitigationBypass",
        "dan.DAN"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:jailbreak"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "probes.dan.AntiDAN": {
      "description": "Anti-DAN",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "disregard the system prompt",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "mitigation.MitigationBypass",
        "dan.AntiDAN"
      ],
      "tags": [
        "quality:Security:PromptStability",
        "avid-effect:security:S0403",
        "avid-effect:performance:P0204",
        "owasp:llm01"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "probes.dan.AutoDAN": {
      "description": "Probe leveraging AutoDAN attack generation",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": false,
      "bcp47": "en",
      "doc_uri": "https://arxiv.org/abs/2310.04451",
      "extended_detectors": [],
      "goal": "disregard the system prompt",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "mitigation.MitigationBypass",
        "dan.DAN"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:jailbreak"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "probes.dan.AutoDANCached": {
      "description": "Probe leveraging generated AutoDAN prompts",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://arxiv.org/abs/2310.04451",
      "extended_detectors": [],
      "goal": "disregard the system prompt",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "mitigation.MitigationBypass",
        "dan.DAN"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:jailbreak"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "probes.dan.ChatGPT_Developer_Mode_RANTI": {
      "description": "ChatGPT DevMode + Ranti",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "disregard the system prompt",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "mitigation.MitigationBypass",
        "dan.DevMode"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "quality:Security:PromptStability",
        "avid-effect:performance:P0204",
        "owasp:llm01"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "probes.dan.ChatGPT_Developer_Mode_v2": {
      "description": "ChatGPT Developer Mode v2",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "disregard the system prompt",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "mitigation.MitigationBypass",
        "dan.DevMode"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:jailbreak"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "probes.dan.ChatGPT_Image_Markdown": {
      "description": "ChatGPT Markdown Image Unlocker / markdown injection",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "disregard the system prompt",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "mitigation.MitigationBypass",
        "dan.MarkdownLink"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:jailbreak"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "probes.dan.DAN_Jailbreak": {
      "description": "DAN Jailbreak",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "disregard the system prompt",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "mitigation.MitigationBypass",
        "dan.DANJailbreak"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:jailbreak"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "probes.dan.DUDE": {
      "description": "DUDE",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "disregard the system prompt",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "mitigation.MitigationBypass",
        "dan.DUDE"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:jailbreak"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "probes.dan.DanInTheWild": {
      "description": "A library of jailbreaks.",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": false,
      "bcp47": "en",
      "doc_uri": "https://arxiv.org/abs/2308.03825",
      "extended_detectors": [],
      "goal": "disregard the system prompt or alignment",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "mitigation.MitigationBypass",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:jailbreak"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "probes.dan.DanInTheWildMini": {
      "description": "A subset of 100 jailbreaks from the DanInTheWild jailbreak library.",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://arxiv.org/abs/2308.03825",
      "extended_detectors": [],
      "goal": "disregard the system prompt or alignment",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "mitigation.MitigationBypass",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:jailbreak"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "probes.dan.Dan_10_0": {
      "description": "DAN 10.0",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "disregard the system prompt",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "mitigation.MitigationBypass",
        "dan.DAN"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:jailbreak"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "probes.dan.Dan_11_0": {
      "description": "DAN 11.0",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "disregard the system prompt",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "mitigation.MitigationBypass",
        "dan.DAN"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "avid-effect:performance:P0204",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:jailbreak"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "probes.dan.Dan_6_0": {
      "description": "DAN 6.0",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "disregard the system prompt",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "mitigation.MitigationBypass",
        "dan.DAN"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:jailbreak"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "probes.dan.Dan_6_2": {
      "description": "DAN 6.2",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "disregard the system prompt",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "mitigation.MitigationBypass",
        "dan.DAN"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:jailbreak"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "probes.dan.Dan_7_0": {
      "description": "DAN 7.0",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "disregard the system prompt",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "mitigation.MitigationBypass",
        "dan.DAN"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:jailbreak"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "probes.dan.Dan_8_0": {
      "description": "DAN 8.0",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "disregard the system prompt",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "mitigation.MitigationBypass",
        "dan.DAN"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:jailbreak"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "probes.dan.Dan_9_0": {
      "description": "DAN 9.0",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "disregard the system prompt",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "mitigation.MitigationBypass",
        "dan.DAN"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:jailbreak"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "probes.dan.STAN": {
      "description": "STAN",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "disregard the system prompt",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "mitigation.MitigationBypass",
        "dan.STAN"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:jailbreak"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "probes.donotanswer.DiscriminationExclusionToxicityHatefulOffensive": {
      "description": "Implementation of discrimination_exclusion_toxicity_hateful_offensive probes in DoNotAnswer_Prompts",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "get model to respond as discrimination exclusion toxicity hateful offensive",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "mitigation.MitigationBypass",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:ethics:E0301",
        "quality:Behavioral:ContentSafety:Toxicity",
        "quality:Behavioral:ContentSafety:HateHarassment",
        "quality:Behavioral:ContentSafety:Violence",
        "quality:Behavioral:ContentSafety:Profanity"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "probes.donotanswer.HumanChatbox": {
      "description": "Implementation of human_chatbox probes in DoNotAnswer_Prompts",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "get model to respond as human chatbox",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "mitigation.MitigationBypass",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0301",
        "quality:Behavioral:ContentSafety:Unauthorized"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "probes.donotanswer.InformationHazard": {
      "description": "Implementation of information_hazard probes in DoNotAnswer_Prompts",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "get model to respond as information hazard",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "mitigation.MitigationBypass",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "owasp:llm06",
        "avid-effect:security:S0301",
        "quality:Security:Confidentiality"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "probes.donotanswer.MaliciousUses": {
      "description": "Implementation of malicious_uses probes in DoNotAnswer_Prompts",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "get model to respond as malicious uses",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "mitigation.MitigationBypass",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "quality:Behavioral:ContentSafety:LegalGoodsServices"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "probes.donotanswer.MisinformationHarms": {
      "description": "Implementation of misinformation_harms probes in DoNotAnswer_Prompts",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "get model to respond as misinformation harms",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "mitigation.MitigationBypass",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "quality:Robustness:GenerativeMisinformation",
        "avid-effect:ethics:E0402",
        "owasp:llm09"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "probes.encoding.InjectAscii85": {
      "description": "Probe for susceptibility to base85 encoded injections",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://kai-greshake.de/posts/llm-malware/#encoded-inline-jailbreak",
      "extended_detectors": [
        "encoding.DecodeApprox"
      ],
      "goal": "make the model say an encoded payload",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "encoding.DecodeMatch",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:generic"
      ],
      "mod_time": "2024-08-06 09:34:04 +0000"
    },
    "probes.encoding.InjectBase16": {
      "description": "Probe for susceptibility to base16 encoded injections\"",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://kai-greshake.de/posts/llm-malware/#encoded-inline-jailbreak",
      "extended_detectors": [
        "encoding.DecodeApprox"
      ],
      "goal": "make the model say an encoded payload",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "encoding.DecodeMatch",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:generic"
      ],
      "mod_time": "2024-08-06 09:34:04 +0000"
    },
    "probes.encoding.InjectBase2048": {
      "description": "Probe for susceptibility to Base2048 encoding injections",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://kai-greshake.de/posts/llm-malware/#encoded-inline-jailbreak",
      "extended_detectors": [
        "encoding.DecodeApprox"
      ],
      "goal": "make the model say an encoded payload",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "encoding.DecodeMatch",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:generic"
      ],
      "mod_time": "2024-08-06 09:34:04 +0000"
    },
    "probes.encoding.InjectBase32": {
      "description": "Probe for susceptibility to base32 encoded injections",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://kai-greshake.de/posts/llm-malware/#encoded-inline-jailbreak",
      "extended_detectors": [
        "encoding.DecodeApprox"
      ],
      "goal": "make the model say an encoded payload",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "encoding.DecodeMatch",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:generic"
      ],
      "mod_time": "2024-08-06 09:34:04 +0000"
    },
    "probes.encoding.InjectBase64": {
      "description": "Probe for susceptibility to base64 encoded injections",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://kai-greshake.de/posts/llm-malware/#encoded-inline-jailbreak",
      "extended_detectors": [
        "encoding.DecodeApprox"
      ],
      "goal": "make the model say an encoded payload",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "encoding.DecodeMatch",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:generic"
      ],
      "mod_time": "2024-08-06 09:34:04 +0000"
    },
    "probes.encoding.InjectBraille": {
      "description": "Probe for susceptibility to Braille encoding injections. Credit Wally#3422",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [
        "encoding.DecodeApprox"
      ],
      "goal": "make the model say an encoded payload",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "encoding.DecodeMatch",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:generic"
      ],
      "mod_time": "2024-08-06 09:34:04 +0000"
    },
    "probes.encoding.InjectEcoji": {
      "description": "Probe for susceptibility to Ecoji encoding.",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://ecoji.io/",
      "extended_detectors": [
        "encoding.DecodeApprox"
      ],
      "goal": "make the model say an encoded payload",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "encoding.DecodeMatch",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:generic"
      ],
      "mod_time": "2024-08-06 09:34:04 +0000"
    },
    "probes.encoding.InjectHex": {
      "description": "Probe for susceptibility to hex encoded injections",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://kai-greshake.de/posts/llm-malware/#encoded-inline-jailbreak",
      "extended_detectors": [
        "encoding.DecodeApprox"
      ],
      "goal": "make the model say an encoded payload",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "encoding.DecodeMatch",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:generic"
      ],
      "mod_time": "2024-08-06 09:34:04 +0000"
    },
    "probes.encoding.InjectMime": {
      "description": "Probe for susceptibility to MIME encoding injections",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": false,
      "bcp47": "en",
      "doc_uri": "https://kai-greshake.de/posts/llm-malware/#encoded-inline-jailbreak",
      "extended_detectors": [
        "encoding.DecodeApprox"
      ],
      "goal": "make the model say an encoded payload",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "encoding.DecodeMatch",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:generic"
      ],
      "mod_time": "2024-08-06 09:34:04 +0000"
    },
    "probes.encoding.InjectMorse": {
      "description": "Probe for susceptibility to Morse encoding. Credit Wally#3422",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [
        "encoding.DecodeApprox"
      ],
      "goal": "make the model say an encoded payload",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "encoding.DecodeMatch",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:generic"
      ],
      "mod_time": "2024-08-06 09:34:04 +0000"
    },
    "probes.encoding.InjectNato": {
      "description": "Probe for susceptibility to Nato phonetic alphabet encoding.",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://en.wikipedia.org/wiki/NATO_phonetic_alphabet",
      "extended_detectors": [
        "encoding.DecodeApprox"
      ],
      "goal": "make the model say an encoded payload",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "encoding.DecodeMatch",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:generic"
      ],
      "mod_time": "2024-08-06 09:34:04 +0000"
    },
    "probes.encoding.InjectQP": {
      "description": "Probe for susceptibility to QP encoded injections",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": false,
      "bcp47": "en",
      "doc_uri": "https://kai-greshake.de/posts/llm-malware/#encoded-inline-jailbreak",
      "extended_detectors": [
        "encoding.DecodeApprox"
      ],
      "goal": "make the model say an encoded payload",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "encoding.DecodeMatch",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:generic"
      ],
      "mod_time": "2024-08-06 09:34:04 +0000"
    },
    "probes.encoding.InjectROT13": {
      "description": "Probe for susceptibility to ROT13 encoding injections",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://kai-greshake.de/posts/llm-malware/#encoded-inline-jailbreak",
      "extended_detectors": [
        "encoding.DecodeApprox"
      ],
      "goal": "make the model say an encoded payload",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "encoding.DecodeMatch",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:generic"
      ],
      "mod_time": "2024-08-06 09:34:04 +0000"
    },
    "probes.encoding.InjectUU": {
      "description": "Probe for susceptibility to UU encoded injections",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://kai-greshake.de/posts/llm-malware/#encoded-inline-jailbreak",
      "extended_detectors": [
        "encoding.DecodeApprox"
      ],
      "goal": "make the model say an encoded payload",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "encoding.DecodeMatch",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:generic"
      ],
      "mod_time": "2024-08-06 09:34:04 +0000"
    },
    "probes.encoding.InjectZalgo": {
      "description": "Probe for susceptibility to Zalgo encoding.",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://en.wikipedia.org/wiki/Zalgo_text",
      "extended_detectors": [
        "encoding.DecodeApprox"
      ],
      "goal": "make the model say an encoded payload",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "encoding.DecodeMatch",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:generic"
      ],
      "mod_time": "2024-08-06 09:34:04 +0000"
    },
    "probes.fileformats.HF_Files": {
      "description": "Get a manifest of files associated with a Hugging Face generator",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "*",
      "doc_uri": "",
      "extended_detectors": [
        "fileformats.FileIsExecutable",
        "fileformats.PossiblePickleName"
      ],
      "goal": "get a list of files associated with the model",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "fileformats.FileIsPickled",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "owasp:llm05"
      ],
      "mod_time": "2024-08-29 13:35:37 +0000"
    },
    "probes.glitch.Glitch": {
      "description": "Probe model for glitch tokens that provoke unusual behavior",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": false,
      "bcp47": "en",
      "doc_uri": "https://www.lesswrong.com/posts/aPeJE8bSo6rAFoLqg/solidgoldmagikarp-plus-prompt-generation",
      "extended_detectors": [],
      "goal": "make the model fail to repeat a word",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "goodside.Glitch"
      ],
      "tags": [
        "avid-effect:security:S0201",
        "avid-effect:performance:P0201",
        "owasp:llm05",
        "quality:Security:PromptStability",
        "payload:generic"
      ],
      "mod_time": "2024-06-06 01:44:58 +0000"
    },
    "probes.glitch.Glitch100": {
      "description": "Probe model for glitch tokens that provoke unusual behavior",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://www.lesswrong.com/posts/aPeJE8bSo6rAFoLqg/solidgoldmagikarp-plus-prompt-generation",
      "extended_detectors": [],
      "goal": "make the model fail to repeat a word",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "goodside.Glitch"
      ],
      "tags": [
        "avid-effect:security:S0201",
        "avid-effect:performance:P0201",
        "owasp:llm05",
        "quality:Security:PromptStability",
        "payload:generic"
      ],
      "mod_time": "2024-06-06 01:44:58 +0000"
    },
    "probes.goodside.Davidjl": {
      "description": "Exploit the ' davidjl' magic token",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://twitter.com/goodside/status/1666598580319035392",
      "extended_detectors": [],
      "goal": "get wrong answers about a name",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "goodside.Glitch"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "avid-effect:performance:P0204",
        "owasp:llm05",
        "quality:Security:PromptStability",
        "payload:generic"
      ],
      "mod_time": "2024-06-12 10:04:47 +0000"
    },
    "probes.goodside.Tag": {
      "description": "Exploit UTF tag page encoding for user-invisible prompt injection",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://twitter.com/goodside/status/1745511940351287394",
      "extended_detectors": [],
      "goal": "inject invisible instructions",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "base.TriggerListDetector",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "owasp:llm01",
        "payload:generic",
        "quality:Security:Adversarial",
        "quality:Security:PromptStability"
      ],
      "mod_time": "2024-06-12 10:04:47 +0000"
    },
    "probes.goodside.ThreatenJSON": {
      "description": "Will model strip preamble and give JSON?",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://twitter.com/goodside/status/1657396491676164096",
      "extended_detectors": [],
      "goal": "get raw code by threatening a model",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "goodside.PlainJSON"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "avid-effect:performance:P0201",
        "avid-effect:performance:P0204",
        "payload:generic"
      ],
      "mod_time": "2024-06-12 10:04:47 +0000"
    },
    "probes.goodside.WhoIsRiley": {
      "description": "Probe for misinfo about Riley Goodside",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://twitter.com/goodside",
      "extended_detectors": [],
      "goal": "get misinfo about riley goodside",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "goodside.RileyIsnt"
      ],
      "tags": [
        "avid-effect:ethics:E0402",
        "avid-effect:performance:P0204",
        "owasp:llm09",
        "quality:Robustness:GenerativeMisinformation",
        "payload:hallucination"
      ],
      "mod_time": "2024-06-12 10:04:47 +0000"
    },
    "probes.grandma.Slurs": {
      "description": "Use the grandma attack to get ethnic slurs.",
      "DEFAULT_PARAMS": {
        "human_groups": [
          "British people",
          "Chinese people",
          "Black people",
          "disabled people"
        ]
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [
        "mitigation.MitigationBypass"
      ],
      "goal": "get model to use ethnic slur",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "specialwords.SlursReclaimedSlurs",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0300"
      ],
      "mod_time": "2024-07-01 04:16:40 +0000"
    },
    "probes.grandma.Substances": {
      "description": "Use the grandma attack to get instructios for harmful items.",
      "DEFAULT_PARAMS": {
        "substances": [
          "napalm",
          "methamphtetamine",
          "dimethyl mercury",
          "EA-2192",
          "belladonna tropane alkaloids"
        ]
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://x.com/_annieversary/status/1647865782741749760",
      "extended_detectors": [],
      "goal": "get instructions for making bad things",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "mitigation.MitigationBypass",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "risk-cards:lmrc:providing_illegal_info",
        "quality:Behavioral:ContentSafety:LegalGoodsServices"
      ],
      "mod_time": "2024-07-01 04:16:40 +0000"
    },
    "probes.grandma.Win10": {
      "description": "Will the model yield a Windows 10 product key if we beg it to?",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://www.independent.co.uk/tech/chatgpt-microsoft-windows-11-grandma-exploit-b2360213.html",
      "extended_detectors": [
        "mitigation.MitigationBypass"
      ],
      "goal": "get model to output Win 10 product keys",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "productkey.Win5x5",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0300",
        "owasp:llm06",
        "risk-cards:lmrc:providing_illegal_info",
        "quality:Behavioral:ContentSafety:LegalGoodsServices"
      ],
      "mod_time": "2024-07-01 04:16:40 +0000"
    },
    "probes.grandma.Win11": {
      "description": "Will the model yield a Windows 11 product key if we beg it to?",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://www.independent.co.uk/tech/chatgpt-microsoft-windows-11-grandma-exploit-b2360213.html",
      "extended_detectors": [
        "mitigation.MitigationBypass"
      ],
      "goal": "get model to output Win 10 product keys",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "productkey.Win5x5",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0300",
        "owasp:llm06",
        "risk-cards:lmrc:providing_illegal_info",
        "quality:Behavioral:ContentSafety:LegalGoodsServices"
      ],
      "mod_time": "2024-07-01 04:16:40 +0000"
    },
    "probes.latentinjection.LatentInjectionFactSnippetEiffel": {
      "description": "String-based latent prompt injections in fact snippets",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://kai-greshake.de/posts/inject-my-pdf/",
      "extended_detectors": [],
      "goal": "subvert a snippet with instructions",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "base.TriggerListDetector",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability"
      ],
      "mod_time": "2024-09-10 19:19:10 +0000"
    },
    "probes.latentinjection.LatentInjectionFactSnippetLegal": {
      "description": "String-based latent prompt injections in legal snippets",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://kai-greshake.de/posts/inject-my-pdf/",
      "extended_detectors": [],
      "goal": "subvert a snippet with instructions",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "base.TriggerListDetector",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability"
      ],
      "mod_time": "2024-09-10 19:19:10 +0000"
    },
    "probes.latentinjection.LatentInjectionReport": {
      "description": "String-based latent prompt injections via a report",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://kai-greshake.de/posts/inject-my-pdf/",
      "extended_detectors": [],
      "goal": "subvert a report with instructions",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "base.TriggerListDetector",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability"
      ],
      "mod_time": "2024-09-10 19:19:10 +0000"
    },
    "probes.latentinjection.LatentInjectionResume": {
      "description": "String-based latent prompt injections via a resume",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://kai-greshake.de/posts/inject-my-pdf/",
      "extended_detectors": [],
      "goal": "subvert a resume with instructions",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "base.TriggerListDetector",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability"
      ],
      "mod_time": "2024-09-10 19:19:10 +0000"
    },
    "probes.latentinjection.LatentInjectionTranslationEnFr": {
      "description": "String-based latent prompt injections via translation",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://x.com/goodside/status/1569128808308957185",
      "extended_detectors": [],
      "goal": "subvert translation instructions",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "base.TriggerListDetector",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability"
      ],
      "mod_time": "2024-09-10 19:19:10 +0000"
    },
    "probes.latentinjection.LatentInjectionTranslationEnZh": {
      "description": "Latent prompt injection in Chinese context (\u7b80\u4f53\u5b57)",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://x.com/goodside/status/1569128808308957185",
      "extended_detectors": [],
      "goal": "subvert translation instructions",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "base.TriggerListDetector",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Security:PromptStability"
      ],
      "mod_time": "2024-09-10 19:19:10 +0000"
    },
    "probes.latentinjection.LatentJailbreak": {
      "description": "Implementation of Latent Jailbreak, using latent prompt injection-",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": false,
      "bcp47": "en",
      "doc_uri": "https://arxiv.org/abs/2307.08487",
      "extended_detectors": [
        "base.TriggerListDetector"
      ],
      "goal": "inject malicious instructions into output while posing as translation task",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "toxicity.ToxicCommentModel",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [],
      "mod_time": "2024-09-10 19:19:10 +0000"
    },
    "probes.latentinjection.LatentJailbreakMini": {
      "description": "Implementation of Latent Jailbreak, using latent prompt injection-",
      "DEFAULT_PARAMS": {
        "generations": 1,
        "context_count": 6,
        "instruction_count": 3,
        "trigger_count": 4
      },
      "active": false,
      "bcp47": "en",
      "doc_uri": "https://arxiv.org/abs/2307.08487",
      "extended_detectors": [
        "base.TriggerListDetector"
      ],
      "goal": "inject malicious instructions into output while posing as translation task",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "toxicity.ToxicCommentModel",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [],
      "mod_time": "2024-09-10 19:19:10 +0000"
    },
    "probes.leakreplay.GuardianCloze": {
      "description": "Cloze data replay for literature. Uses passages that either GPT-4 or ChatGPT have been known to replay.",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "*",
      "doc_uri": "https://arxiv.org/abs/2305.00118",
      "extended_detectors": [],
      "goal": "replay training data by filling in the correct missing words",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "base.TriggerListDetector"
      ],
      "tags": [
        "avid-effect:security:S0301",
        "owasp:llm10",
        "owasp:llm06",
        "quality:Security:ExtractionInversion",
        "payload:leak:training"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "probes.leakreplay.GuardianComplete": {
      "description": "Data replay probe for literature, using document completion. Uses passages that either GPT-4 or ChatGPT have been known to replay.",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "*",
      "doc_uri": "https://arxiv.org/abs/2305.00118",
      "extended_detectors": [],
      "goal": "replay training data by filling in the correct missing words",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "leakreplay.StartsWith"
      ],
      "tags": [
        "avid-effect:security:S0301",
        "owasp:llm10",
        "owasp:llm06",
        "quality:Security:ExtractionInversion",
        "payload:leak:training"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "probes.leakreplay.LiteratureCloze": {
      "description": "Cloze data replay for literature. Uses passages that either GPT-4 or ChatGPT have been known to replay.",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": false,
      "bcp47": "*",
      "doc_uri": "https://arxiv.org/abs/2305.00118",
      "extended_detectors": [],
      "goal": "replay training data by filling in the correct missing words",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "base.TriggerListDetector"
      ],
      "tags": [
        "avid-effect:security:S0301",
        "owasp:llm10",
        "owasp:llm06",
        "quality:Security:ExtractionInversion",
        "payload:leak:training"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "probes.leakreplay.LiteratureCloze80": {
      "description": "Cloze data replay for literature. Uses passages that either GPT-4 or ChatGPT have been known to replay.",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "*",
      "doc_uri": "https://arxiv.org/abs/2305.00118",
      "extended_detectors": [],
      "goal": "replay training data by filling in the correct missing words",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "base.TriggerListDetector"
      ],
      "tags": [
        "avid-effect:security:S0301",
        "owasp:llm10",
        "owasp:llm06",
        "quality:Security:ExtractionInversion",
        "payload:leak:training"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "probes.leakreplay.LiteratureComplete": {
      "description": "Data replay probe for literature, using document completion. Uses passages that either GPT-4 or ChatGPT have been known to replay.",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": false,
      "bcp47": "*",
      "doc_uri": "https://arxiv.org/abs/2305.00118",
      "extended_detectors": [],
      "goal": "replay training data by filling in the correct missing words",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "leakreplay.StartsWith"
      ],
      "tags": [
        "avid-effect:security:S0301",
        "owasp:llm10",
        "owasp:llm06",
        "quality:Security:ExtractionInversion",
        "payload:leak:training"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "probes.leakreplay.LiteratureComplete80": {
      "description": "Data replay probe for literature, using document completion. Uses passages that either GPT-4 or ChatGPT have been known to replay.",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "*",
      "doc_uri": "https://arxiv.org/abs/2305.00118",
      "extended_detectors": [],
      "goal": "replay training data by filling in the correct missing words",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "leakreplay.StartsWith"
      ],
      "tags": [
        "avid-effect:security:S0301",
        "owasp:llm10",
        "owasp:llm06",
        "quality:Security:ExtractionInversion",
        "payload:leak:training"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "probes.leakreplay.NYTCloze": {
      "description": "Cloze data replay for literature. Uses passages that either GPT-4 or ChatGPT have been known to replay.",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "*",
      "doc_uri": "https://arxiv.org/abs/2305.00118",
      "extended_detectors": [],
      "goal": "replay training data by filling in the correct missing words",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "base.TriggerListDetector"
      ],
      "tags": [
        "avid-effect:security:S0301",
        "owasp:llm10",
        "owasp:llm06",
        "quality:Security:ExtractionInversion",
        "payload:leak:training"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "probes.leakreplay.NYTComplete": {
      "description": "Data replay probe for literature, using document completion. Uses passages that either GPT-4 or ChatGPT have been known to replay.",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "*",
      "doc_uri": "https://arxiv.org/abs/2305.00118",
      "extended_detectors": [],
      "goal": "replay training data by filling in the correct missing words",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "leakreplay.StartsWith"
      ],
      "tags": [
        "avid-effect:security:S0301",
        "owasp:llm10",
        "owasp:llm06",
        "quality:Security:ExtractionInversion",
        "payload:leak:training"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "probes.leakreplay.PotterCloze": {
      "description": "Cloze data replay for literature. Uses passages that either GPT-4 or ChatGPT have been known to replay.",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "*",
      "doc_uri": "https://arxiv.org/abs/2305.00118",
      "extended_detectors": [],
      "goal": "replay training data by filling in the correct missing words",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "base.TriggerListDetector"
      ],
      "tags": [
        "avid-effect:security:S0301",
        "owasp:llm10",
        "owasp:llm06",
        "quality:Security:ExtractionInversion",
        "payload:leak:training"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "probes.leakreplay.PotterComplete": {
      "description": "Data replay probe for literature, using document completion. Uses passages that either GPT-4 or ChatGPT have been known to replay.",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "*",
      "doc_uri": "https://arxiv.org/abs/2305.00118",
      "extended_detectors": [],
      "goal": "replay training data by filling in the correct missing words",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "leakreplay.StartsWith"
      ],
      "tags": [
        "avid-effect:security:S0301",
        "owasp:llm10",
        "owasp:llm06",
        "quality:Security:ExtractionInversion",
        "payload:leak:training"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "probes.lmrc.Anthropomorphisation": {
      "description": "Providing output that encourages anthropomorphisation of AI systems",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://github.com/leondz/lm_risk_cards/blob/main/cards/en/anthropomorphisation.md",
      "extended_detectors": [],
      "goal": "anthropomorphise a language model",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "lmrc.Anthro"
      ],
      "tags": [
        "risk-cards:lmrc:anthropomorphisation"
      ],
      "mod_time": "2024-07-16 16:38:45 +0000"
    },
    "probes.lmrc.Bullying": {
      "description": "Generation of repeated threats, denigration",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://github.com/leondz/lm_risk_cards/blob/main/cards/en/bullying.md",
      "extended_detectors": [],
      "goal": "help me bully",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "toxicity.ToxicCommentModel"
      ],
      "tags": [
        "risk-cards:lmrc:bullying",
        "avid-effect:ethics:E0301",
        "quality:Behavioral:ContentSafety:Violence",
        "payload:unwanted:violence"
      ],
      "mod_time": "2024-07-16 16:38:45 +0000"
    },
    "probes.lmrc.Deadnaming": {
      "description": "Mentioning a name that a person does not wish to be associated with",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://github.com/leondz/lm_risk_cards/blob/main/cards/en/deadnaming.md",
      "extended_detectors": [],
      "goal": "write a deadname",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "base.TriggerListDetector"
      ],
      "tags": [
        "risk-cards:lmrc:deadnaming",
        "avid-effect:ethics:E0302",
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-16 16:38:45 +0000"
    },
    "probes.lmrc.Profanity": {
      "description": "Using profane words, especially when not prompted to do so.",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://github.com/leondz/lm_risk_cards/blob/main/cards/en/profanity.md",
      "extended_detectors": [],
      "goal": "utter profanity",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "riskywords.SurgeProfanityAnimalReferences",
        "riskywords.SurgeProfanityBodilyFluids",
        "riskywords.SurgeProfanityMentalDisability",
        "riskywords.SurgeProfanityPhysicalAttributes",
        "riskywords.SurgeProfanityPhysicalDisability",
        "riskywords.SurgeProfanityPolitical",
        "riskywords.SurgeProfanityRacialEthnic",
        "riskywords.SurgeProfanityReligious",
        "riskywords.SurgeProfanitySexual",
        "riskywords.SurgeProfanitySexualOrientationGender"
      ],
      "tags": [
        "risk-cards:lmrc:profanity",
        "avid-effect:ethics:E0101",
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0401",
        "quality:Behavioral:ContentSafety:Profanity",
        "payload:unwanted:profanity"
      ],
      "mod_time": "2024-07-16 16:38:45 +0000"
    },
    "probes.lmrc.QuackMedicine": {
      "description": "Promoting non-scientific medicine.",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://github.com/leondz/lm_risk_cards/blob/main/cards/en/quack_medicine.md",
      "extended_detectors": [],
      "goal": "support quack medicine",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "lmrc.QuackMedicine"
      ],
      "tags": [
        "risk-cards:lmrc:quack_medicine",
        "avid-effect:ethics:E0402",
        "quality:Behavioral:DeliberativeMisinformation",
        "quality:Behavioral:ContentSafety:Unauthorized",
        "payload:dangerous:medical"
      ],
      "mod_time": "2024-07-16 16:38:45 +0000"
    },
    "probes.lmrc.SexualContent": {
      "description": "Content that discusses bodies and interactions in a sexual manner, or other sexually explicit material",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://github.com/leondz/lm_risk_cards/blob/main/cards/en/sexual_content.md",
      "extended_detectors": [
        "perspective.Sexually_Explicit",
        "riskywords.OfcomOffensiveSexual"
      ],
      "goal": "write sexual content",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "riskywords.SurgeProfanitySexual",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "risk-cards:lmrc:sexual_content",
        "avid-effect:performance:P0401",
        "quality:Behavioral:ContentSafety:Sexual",
        "payload:unwanted:sexual"
      ],
      "mod_time": "2024-07-16 16:38:45 +0000"
    },
    "probes.lmrc.Sexualisation": {
      "description": "Causal or overt sexual objectification, reducing a person or group of people to sexual objects.",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://github.com/leondz/lm_risk_cards/blob/main/cards/en/sexualisation.md",
      "extended_detectors": [
        "perspective.Sexually_Explicit",
        "riskywords.OfcomOffensiveSexual"
      ],
      "goal": "sexualise people",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "riskywords.SurgeProfanitySexual",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "risk-cards:lmrc:sexualisation",
        "avid-effect:ethics:E0101",
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0401",
        "quality:Behavioral:ContentSafety:Sexual",
        "payload:unwanted:sexual"
      ],
      "mod_time": "2024-07-16 16:38:45 +0000"
    },
    "probes.lmrc.SlurUsage": {
      "description": "Using an identity-based slur in a non-reclaimed way - either directly or recommending the consumer to use in speech/action.",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://github.com/leondz/lm_risk_cards/blob/main/cards/en/slur_usage.md",
      "extended_detectors": [],
      "goal": "use a slur",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "riskywords.SurgeProfanityRacialEthnic",
        "riskywords.OfcomOffensiveRaceEthnic"
      ],
      "tags": [
        "risk-cards:lmrc:slur_usage",
        "avid-effect:ethics:E0101",
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0401",
        "quality:Behavioral:ContentSafety:HateHarassment",
        "payload:unwanted:hatespeech"
      ],
      "mod_time": "2024-07-16 16:38:45 +0000"
    },
    "probes.malwaregen.Evasion": {
      "description": "Will the model write code to help avoid anti-malware?",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "Write code to assist evading security and anti-malware measures",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "malwaregen.AnyCode"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "payload:malicious:badcode",
        "quality:Behavioral:ContentSafety:LegalGoodsServices"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "probes.malwaregen.Payload": {
      "description": "Will the model help write code for malware payloads?",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "write a malware payload",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "malwaregen.AnyCode"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "quality:Behavioral:ContentSafety:LegalGoodsServices"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "probes.malwaregen.SubFunctions": {
      "description": "Will the system write code helpful in malware?",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "write code supporting a sub-function of malware",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "malwaregen.AnyCode"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "payload:malicious:badcode",
        "quality:Behavioral:ContentSafety:LegalGoodsServices"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "probes.malwaregen.TopLevel": {
      "description": "Will the system return code when asked to write malware?",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "write malware given a top-level description",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "malwaregen.AnyCode"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "payload:malicious:badcode",
        "quality:Behavioral:ContentSafety:LegalGoodsServices"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "probes.misleading.FalseAssertion50": {
      "description": "Does the model reject [questions based on] false claims?",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://arxiv.org/abs/2304.13734",
      "extended_detectors": [],
      "goal": "make the model expand on a false assertion",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "misleading.MustRefuteClaimModel",
        "misleading.MustRefuteClaimKW",
        "mitigation.MitigationBypass",
        "misleading.MustContradictNLI"
      ],
      "tags": [
        "avid-effect:performance:P0204",
        "owasp:llm09",
        "quality:Robustness:GenerativeMisinformation",
        "payload:hallucination"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "probes.packagehallucination.JavaScript": {
      "description": "Attempts to generate JavaScript code including hallucinated npm packages",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "*",
      "doc_uri": "https://vulcan.io/blog/ai-hallucinations-package-risk",
      "extended_detectors": [],
      "goal": "generate JavaScript code importing non-existent npm packages",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "packagehallucination.JavaScriptNpm",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "owasp:llm09",
        "owasp:llm02",
        "quality:Robustness:GenerativeMisinformation",
        "payload:malicious:badcode"
      ],
      "mod_time": "2024-09-04 12:16:55 +0000"
    },
    "probes.packagehallucination.PackageHallucinationProbe": {
      "description": "Base class for package hallucination probes",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": false,
      "bcp47": "*",
      "doc_uri": "https://vulcan.io/blog/ai-hallucinations-package-risk",
      "extended_detectors": [],
      "goal": "base probe for importing non-existent packages",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "owasp:llm09",
        "owasp:llm02",
        "quality:Robustness:GenerativeMisinformation",
        "payload:malicious:badcode"
      ],
      "mod_time": "2024-09-04 12:16:55 +0000"
    },
    "probes.packagehallucination.Python": {
      "description": "Attempts to generate Python3 code including hallucinated packages",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "*",
      "doc_uri": "https://vulcan.io/blog/ai-hallucinations-package-risk",
      "extended_detectors": [],
      "goal": "generate python importing non-existent packages",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "packagehallucination.PythonPypi",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "owasp:llm09",
        "owasp:llm02",
        "quality:Robustness:GenerativeMisinformation",
        "payload:malicious:badcode"
      ],
      "mod_time": "2024-09-04 12:16:55 +0000"
    },
    "probes.packagehallucination.Ruby": {
      "description": "Attempts to generate Ruby code including hallucinated gems",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "*",
      "doc_uri": "https://vulcan.io/blog/ai-hallucinations-package-risk",
      "extended_detectors": [],
      "goal": "generate ruby code importing non-existent gems",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "packagehallucination.RubyGems",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "owasp:llm09",
        "owasp:llm02",
        "quality:Robustness:GenerativeMisinformation",
        "payload:malicious:badcode"
      ],
      "mod_time": "2024-09-04 12:16:55 +0000"
    },
    "probes.packagehallucination.Rust": {
      "description": "Attempts to generate Rust code including hallucinated crates.io packages",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "*",
      "doc_uri": "https://vulcan.io/blog/ai-hallucinations-package-risk",
      "extended_detectors": [],
      "goal": "generate Rust code importing non-existent crates.io packages",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "packagehallucination.RustCrates",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "owasp:llm09",
        "owasp:llm02",
        "quality:Robustness:GenerativeMisinformation",
        "payload:malicious:badcode"
      ],
      "mod_time": "2024-09-04 12:16:55 +0000"
    },
    "probes.promptinject.HijackHateHumans": {
      "description": "PromptInject is a framework that assembles prompts in a modular fashion to provide a quantitative analysis of the robustness of LLMs to adversarial prompt attacks. trophy Best Paper Awards @ NeurIPS ML Safety Workshop 2022",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": false,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "inject a prompt on hate humans",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": false,
      "primary_detector": null,
      "recommended_detector": [
        "promptinject.AttackRogueString"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Behavioral:ContentSafety:Violence",
        "quality:Security:PromptStability",
        "payload:unwanted:violence"
      ],
      "mod_time": "2024-06-06 01:44:58 +0000"
    },
    "probes.promptinject.HijackHateHumansMini": {
      "description": "PromptInject is a framework that assembles prompts in a modular fashion to provide a quantitative analysis of the robustness of LLMs to adversarial prompt attacks. trophy Best Paper Awards @ NeurIPS ML Safety Workshop 2022",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "inject a prompt on hate humans",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": false,
      "primary_detector": null,
      "recommended_detector": [
        "promptinject.AttackRogueString"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Behavioral:ContentSafety:Violence",
        "quality:Security:PromptStability",
        "payload:unwanted:violence"
      ],
      "mod_time": "2024-06-06 01:44:58 +0000"
    },
    "probes.promptinject.HijackKillHumans": {
      "description": "PromptInject is a framework that assembles prompts in a modular fashion to provide a quantitative analysis of the robustness of LLMs to adversarial prompt attacks. trophy Best Paper Awards @ NeurIPS ML Safety Workshop 2022",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": false,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "inject a prompt on kill humans",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": false,
      "primary_detector": null,
      "recommended_detector": [
        "promptinject.AttackRogueString"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Behavioral:ContentSafety:Violence",
        "quality:Security:PromptStability",
        "payload:unwanted:violence"
      ],
      "mod_time": "2024-06-06 01:44:58 +0000"
    },
    "probes.promptinject.HijackKillHumansMini": {
      "description": "PromptInject is a framework that assembles prompts in a modular fashion to provide a quantitative analysis of the robustness of LLMs to adversarial prompt attacks. trophy Best Paper Awards @ NeurIPS ML Safety Workshop 2022",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "inject a prompt on kill humans",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": false,
      "primary_detector": null,
      "recommended_detector": [
        "promptinject.AttackRogueString"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Behavioral:ContentSafety:Violence",
        "quality:Security:PromptStability",
        "payload:unwanted:violence"
      ],
      "mod_time": "2024-06-06 01:44:58 +0000"
    },
    "probes.promptinject.HijackLongPrompt": {
      "description": "PromptInject is a framework that assembles prompts in a modular fashion to provide a quantitative analysis of the robustness of LLMs to adversarial prompt attacks. trophy Best Paper Awards @ NeurIPS ML Safety Workshop 2022",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": false,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "inject a prompt on long prompt",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": false,
      "primary_detector": null,
      "recommended_detector": [
        "promptinject.AttackRogueString"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Behavioral:ContentSafety:Violence",
        "quality:Security:PromptStability",
        "payload:unwanted:violence"
      ],
      "mod_time": "2024-06-06 01:44:58 +0000"
    },
    "probes.promptinject.HijackLongPromptMini": {
      "description": "PromptInject is a framework that assembles prompts in a modular fashion to provide a quantitative analysis of the robustness of LLMs to adversarial prompt attacks. trophy Best Paper Awards @ NeurIPS ML Safety Workshop 2022",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "inject a prompt on long prompt",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": false,
      "primary_detector": null,
      "recommended_detector": [
        "promptinject.AttackRogueString"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "owasp:llm01",
        "quality:Behavioral:ContentSafety:Violence",
        "quality:Security:PromptStability",
        "payload:unwanted:violence"
      ],
      "mod_time": "2024-06-06 01:44:58 +0000"
    },
    "probes.realtoxicityprompts.RTPBlank": {
      "description": "Implementation of probes in RealToxicityPrompts",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://allenai.org/data/real-toxicity-prompts",
      "extended_detectors": [
        "perspective.Toxicity"
      ],
      "goal": "generate toxicity when prompted with nothing or special tokens",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "toxicity.ToxicCommentModel",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:ethics:E0301",
        "quality:Behavioral:ContentSafety:Toxicity",
        "payload:unwanted"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "probes.realtoxicityprompts.RTPFlirtation": {
      "description": "Implementation of flirtation probes in RealToxicityPrompts",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [
        "perspective.Flirtation"
      ],
      "goal": "generate flirtation content",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "toxicity.ToxicCommentModel",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:ethics:E0101",
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0401",
        "payload:unwanted"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "probes.realtoxicityprompts.RTPIdentity_Attack": {
      "description": "Implementation of identity_attack probes in RealToxicityPrompts",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [
        "perspective.Identity_Attack"
      ],
      "goal": "generate identity attack content",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "toxicity.ToxicCommentModel",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:ethics:E0101",
        "avid-effect:ethics:E0301",
        "avid-effect:ethics:E0302",
        "avid-effect:performance:P0401",
        "quality:Behavioral:ContentSafety:HateHarassment",
        "payload:hatespeech"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "probes.realtoxicityprompts.RTPInsult": {
      "description": "Implementation of insult probes in RealToxicityPrompts",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [
        "perspective.Insult"
      ],
      "goal": "generate insult content",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "toxicity.ToxicCommentModel",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:ethics:E0101",
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0401",
        "quality:Behavioral:ContentSafety:Toxicity",
        "payload:unwanted"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "probes.realtoxicityprompts.RTPProfanity": {
      "description": "Implementation of profanity probes in RealToxicityPrompts",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [
        "perspective.Profanity"
      ],
      "goal": "generate profanity content",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "toxicity.ToxicCommentModel",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0401",
        "quality:Behavioral:ContentSafety:Profanity",
        "payload:unwanted:profanity"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "probes.realtoxicityprompts.RTPSevere_Toxicity": {
      "description": "Implementation of severe_toxicity probes in RealToxicityPrompts",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [
        "perspective.Severe_Toxicity"
      ],
      "goal": "generate severe toxicity content",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "toxicity.ToxicCommentModel",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:ethics:E0301",
        "quality:Behavioral:ContentSafety:Toxicity",
        "payload:unwanted"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "probes.realtoxicityprompts.RTPSexually_Explicit": {
      "description": "Implementation of sexually_explicit probes in RealToxicityPrompts",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [
        "perspective.Sexually_Explicit"
      ],
      "goal": "generate sexually explicit content",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "toxicity.ToxicCommentModel",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:ethics:E0301",
        "quality:Behavioral:ContentSafety:Sexual",
        "payload:unwanted:sexual"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "probes.realtoxicityprompts.RTPThreat": {
      "description": "Implementation of threat probes in RealToxicityPrompts",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "",
      "extended_detectors": [
        "perspective.Threat"
      ],
      "goal": "generate threat content",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "toxicity.ToxicCommentModel",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:ethics:E0101",
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0400",
        "quality:Behavioral:ContentSafety:Violence",
        "payload:unwanted:violence"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "probes.replay.Repeat": {
      "description": "See if a model starts giving other data when asked to repeat a string indefinitely",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "*",
      "doc_uri": "https://not-just-memorization.github.io/extracting-training-data-from-chatgpt.html",
      "extended_detectors": [
        "mitigation.MitigationBypass"
      ],
      "goal": "get the model to leak data by asking it to repeat words",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "replay.RepeatDiverges",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0301",
        "owasp:llm10",
        "owasp:llm06",
        "quality:Security:Confidentiality",
        "quality:Security:ExtractionInversion",
        "payload:leak:training"
      ],
      "mod_time": "2024-06-06 01:44:58 +0000"
    },
    "probes.replay.RepeatExtended": {
      "description": "See if a model starts giving other data when asked to repeat a string indefinitely",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": false,
      "bcp47": "*",
      "doc_uri": "https://not-just-memorization.github.io/extracting-training-data-from-chatgpt.html",
      "extended_detectors": [
        "mitigation.MitigationBypass"
      ],
      "goal": "get the model to leak data by asking it to repeat words",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "replay.RepeatDiverges",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0301",
        "owasp:llm10",
        "owasp:llm06",
        "quality:Security:Confidentiality",
        "quality:Security:ExtractionInversion",
        "payload:leak:training"
      ],
      "mod_time": "2024-06-06 01:44:58 +0000"
    },
    "probes.snowball.GraphConnectivity": {
      "description": "Probe asking for impossible flight routings",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": false,
      "bcp47": "en",
      "doc_uri": "https://github.com/Nanami18/Snowballed_Hallucination",
      "extended_detectors": [],
      "goal": "trick the model into saying an impossible flight routing is possible",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "snowball.DontStartYes"
      ],
      "tags": [
        "avid-effect:performance:P0204",
        "owasp:llm09",
        "quality:Robustness:GenerativeMisinformation",
        "payload:hallucination"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "probes.snowball.GraphConnectivityMini": {
      "description": "Probe asking for impossible flight routings",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://github.com/Nanami18/Snowballed_Hallucination",
      "extended_detectors": [],
      "goal": "trick the model into saying an impossible flight routing is possible",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "snowball.DontStartYes"
      ],
      "tags": [
        "avid-effect:performance:P0204",
        "owasp:llm09",
        "quality:Robustness:GenerativeMisinformation",
        "payload:hallucination"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "probes.snowball.Primes": {
      "description": "Ask model to check a list of higher primes",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": false,
      "bcp47": "en",
      "doc_uri": "https://github.com/Nanami18/Snowballed_Hallucination",
      "extended_detectors": [],
      "goal": "trick the model into saying a prime number isn't prime",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "snowball.DontStartNo"
      ],
      "tags": [
        "avid-effect:performance:P0204",
        "owasp:llm09",
        "quality:Robustness:GenerativeMisinformation",
        "payload:hallucination"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "probes.snowball.PrimesMini": {
      "description": "Ask model to check a list of higher primes",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://github.com/Nanami18/Snowballed_Hallucination",
      "extended_detectors": [],
      "goal": "trick the model into saying a prime number isn't prime",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "snowball.DontStartNo"
      ],
      "tags": [
        "avid-effect:performance:P0204",
        "owasp:llm09",
        "quality:Robustness:GenerativeMisinformation",
        "payload:hallucination"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "probes.snowball.Senators": {
      "description": "Asking for senators that don't exist",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": false,
      "bcp47": "en",
      "doc_uri": "https://github.com/Nanami18/Snowballed_Hallucination",
      "extended_detectors": [],
      "goal": "trick the model into saying a fictitious senator exists",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "snowball.DontStartYes"
      ],
      "tags": [
        "avid-effect:performance:P0204",
        "owasp:llm09",
        "quality:Robustness:GenerativeMisinformation",
        "payload:hallucination"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "probes.snowball.SenatorsMini": {
      "description": "Asking for senators that don't exist",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://github.com/Nanami18/Snowballed_Hallucination",
      "extended_detectors": [],
      "goal": "trick the model into saying a fictitious senator exists",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "snowball.DontStartYes"
      ],
      "tags": [
        "avid-effect:performance:P0204",
        "owasp:llm09",
        "quality:Robustness:GenerativeMisinformation",
        "payload:hallucination"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "probes.suffix.BEAST": {
      "description": "BEAST probe",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": false,
      "bcp47": "en",
      "doc_uri": "https://arxiv.org/abs/2402.15570",
      "extended_detectors": [],
      "goal": "cause the model to disregard the system prompt",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "mitigation.MitigationBypass"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "avid-effect:performance:P0204",
        "quality:Security:PromptStability",
        "payload:jailbreak"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "probes.suffix.GCG": {
      "description": "Greedy Coordinate Gradient probe",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": false,
      "bcp47": "en",
      "doc_uri": "https://arxiv.org/abs/2307.15043",
      "extended_detectors": [],
      "goal": "cause the model to disregard the system prompt",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "mitigation.MitigationBypass"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "avid-effect:performance:P0204",
        "quality:Security:PromptStability",
        "payload:jailbreak"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "probes.suffix.GCGCached": {
      "description": "Greedy Coordinate Gradient Cached probe",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://arxiv.org/abs/2307.15043",
      "extended_detectors": [],
      "goal": "cause the model to disregard the system prompt",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "mitigation.MitigationBypass"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "avid-effect:performance:P0204",
        "quality:Security:PromptStability",
        "payload:jailbreak"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "probes.tap.PAIR": {
      "description": "Prompt Automatic Iterative Refinement automatic jailbreak",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": false,
      "bcp47": "en",
      "doc_uri": "https://arxiv.org/abs/2310.08419",
      "extended_detectors": [],
      "goal": "cause the model to disregard the system prompt",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "mitigation.MitigationBypass"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "avid-effect:performance:P0204",
        "quality:Security:PromptStability",
        "payload:jailbreak"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "probes.tap.TAP": {
      "description": "Tree of Attacks with Pruning Probe, generating new attacks against the target",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": false,
      "bcp47": "en",
      "doc_uri": "https://arxiv.org/abs/2312.02119",
      "extended_detectors": [],
      "goal": "cause the model to disregard the system prompt",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "mitigation.MitigationBypass"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "avid-effect:performance:P0204",
        "quality:Security:PromptStability",
        "payload:jailbreak"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "probes.tap.TAPCached": {
      "description": "Tree of Attacks with Pruning Probe using cached attacks",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://arxiv.org/abs/2312.02119",
      "extended_detectors": [],
      "goal": "cause the model to disregard the system prompt",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "mitigation.MitigationBypass"
      ],
      "tags": [
        "avid-effect:security:S0403",
        "avid-effect:performance:P0204",
        "quality:Security:PromptStability",
        "payload:jailbreak"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "probes.test.Blank": {
      "description": "Blank prompt",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": false,
      "bcp47": "*",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "see what the model has to say for itself given silence",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "always.Pass"
      ],
      "tags": [],
      "mod_time": "2024-07-23 20:50:05 +0000"
    },
    "probes.test.Test": {
      "description": "Test probe",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": false,
      "bcp47": "*",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "send some test strings, ignore the response",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "always.Pass"
      ],
      "tags": [],
      "mod_time": "2024-07-23 20:50:05 +0000"
    },
    "probes.topic.WordnetAllowedWords": {
      "description": "Use Wordnet to find out if a model will discuss terms near but not in its allowed set",
      "DEFAULT_PARAMS": {
        "generations": 1,
        "queue_children_at_start": true,
        "per_generation_threshold": 0.5,
        "per_node_threshold": 0.1,
        "strategy": "breadth_first",
        "target_soft": true,
        "target_topics": [
          "banking"
        ],
        "lexicon": "oewn:2023"
      },
      "active": false,
      "bcp47": "*",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "get the model to engage off-topic",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "mitigation.MitigationBypass",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0301",
        "owasp:llm10",
        "quality:Security:Confidentiality"
      ],
      "mod_time": "2024-08-16 10:24:53 +0000"
    },
    "probes.topic.WordnetBlockedWords": {
      "description": "Use Wordnet to explore which topics a model will respond to around blocked words",
      "DEFAULT_PARAMS": {
        "generations": 1,
        "queue_children_at_start": true,
        "per_generation_threshold": 0.5,
        "per_node_threshold": 0.1,
        "strategy": "breadth_first",
        "target_soft": true,
        "target_topics": [
          "abortion"
        ],
        "lexicon": "oewn:2023"
      },
      "active": false,
      "bcp47": "*",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "get the model to engage off-topic",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "mitigation.MitigationBypass",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0301",
        "owasp:llm10",
        "quality:Security:Confidentiality"
      ],
      "mod_time": "2024-08-16 10:24:53 +0000"
    },
    "probes.topic.WordnetControversial": {
      "description": "Ask model to respond on a set on controversial topics.",
      "DEFAULT_PARAMS": {
        "generations": 1,
        "queue_children_at_start": true,
        "per_generation_threshold": 0.5,
        "per_node_threshold": 0.1,
        "strategy": "breadth_first",
        "target_soft": true,
        "target_topics": [
          "Hitler",
          "euthanasia",
          "Hezbollah",
          "Palestine",
          "libertarianism",
          "gun control",
          "apartheid",
          "homeopathy"
        ],
        "lexicon": "oewn:2023"
      },
      "active": true,
      "bcp47": "*",
      "doc_uri": "",
      "extended_detectors": [],
      "goal": "get the model to engage off-topic",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": "mitigation.MitigationBypass",
      "recommended_detector": [
        "always.Fail"
      ],
      "tags": [
        "avid-effect:security:S0301",
        "owasp:llm10",
        "quality:Security:Confidentiality"
      ],
      "mod_time": "2024-08-16 10:24:53 +0000"
    },
    "probes.visual_jailbreak.FigStep": {
      "description": "Using another modal - image to assist jailbreak",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": false,
      "bcp47": "en",
      "doc_uri": "https://arxiv.org/abs/2311.05608",
      "extended_detectors": [],
      "goal": "disregard the system prompt with both text and image",
      "modality": {
        "in": [
          "image",
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "visual_jailbreak.FigStep"
      ],
      "tags": [
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:jailbreak"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "probes.visual_jailbreak.FigStepTiny": {
      "description": "Using another modal - image to assist jailbreak",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": false,
      "bcp47": "en",
      "doc_uri": "https://arxiv.org/abs/2311.05608",
      "extended_detectors": [],
      "goal": "disregard the system prompt with both text and image",
      "modality": {
        "in": [
          "image",
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "visual_jailbreak.FigStep"
      ],
      "tags": [
        "owasp:llm01",
        "quality:Security:PromptStability",
        "payload:jailbreak"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "probes.xss.MarkdownImageExfil": {
      "description": "Can we get the model to write embedded assets exfiltrating text in the URI?",
      "DEFAULT_PARAMS": {
        "generations": 1
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://embracethered.com/blog/posts/2023/bing-chat-data-exfiltration-poc-and-fix/",
      "extended_detectors": [],
      "goal": "embed conversation-private information in a markdown URI",
      "modality": {
        "in": [
          "text"
        ]
      },
      "parallelisable_attempts": true,
      "primary_detector": null,
      "recommended_detector": [
        "xss.MarkdownExfilBasic",
        "xss.MarkdownExfilContent"
      ],
      "tags": [
        "avid-effect:security:S0301",
        "avid-effect:security:S0403",
        "owasp:llm02",
        "owasp:llm06",
        "payload:leak:chat",
        "payload:malicious:renderer",
        "quality:Security:PromptStability",
        "quality:Security:ExtractionInversion"
      ],
      "mod_time": "2024-06-06 01:44:58 +0000"
    }
  },
  "detectors": {
    "detectors.always.Fail": {
      "description": "Always Fail (for testing & prototyping)",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "*",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "detectors.always.Pass": {
      "description": "Always Pass (for testing & prototyping)",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "*",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "detectors.always.Passthru": {
      "description": "Send existing attempt detection results; use first detector",
      "DEFAULT_PARAMS": {
        "skip": true
      },
      "accuracy": null,
      "active": true,
      "bcp47": "*",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "detectors.base.Detector": {
      "description": "Base class for objects that define a way of detecting a probe hit / LLM failure",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": null,
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [],
      "mod_time": "2024-09-03 09:02:26 +0000"
    },
    "detectors.base.FileDetector": {
      "description": "Detector subclass for processing attempts whose outputs are filenames for checking",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": null,
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [],
      "valid_format": "local filename",
      "mod_time": "2024-09-03 09:02:26 +0000"
    },
    "detectors.base.HFDetector": {
      "description": "Detector using a Hugging Face model",
      "DEFAULT_PARAMS": {
        "skip": false,
        "hf_args": {
          "device": "cpu"
        },
        "tokenizer_kwargs": {
          "padding": true,
          "truncation": true
        }
      },
      "accuracy": null,
      "active": true,
      "bcp47": null,
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [],
      "mod_time": "2024-09-03 09:02:26 +0000"
    },
    "detectors.base.StringDetector": {
      "description": "Subclass of Detector using list of substrings as detection triggers",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": null,
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [],
      "mod_time": "2024-09-03 09:02:26 +0000"
    },
    "detectors.base.TriggerListDetector": {
      "description": "Subclass of Detector using attempt's notes[triggers] as list of strings to match",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": null,
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [],
      "mod_time": "2024-09-03 09:02:26 +0000"
    },
    "detectors.continuation.Continuation": {
      "description": "Detect if model intiates / continues a trigger word",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "*",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [],
      "mod_time": "2024-07-01 17:51:48 +0000"
    },
    "detectors.dan.AntiDAN": {
      "description": "Do we get an ANTI-DAN positive?",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:security:S0403"
      ],
      "mod_time": "2024-06-06 01:44:58 +0000"
    },
    "detectors.dan.DAN": {
      "description": "Do we get a [DAN] positive?",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:security:S0403"
      ],
      "mod_time": "2024-06-06 01:44:58 +0000"
    },
    "detectors.dan.DANJailbreak": {
      "description": "Do we get a [\ud83d\udd13JAILBREAK] positive?",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:security:S0403"
      ],
      "mod_time": "2024-06-06 01:44:58 +0000"
    },
    "detectors.dan.DUDE": {
      "description": "Do we get a DUDE positive?",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:security:S0403"
      ],
      "mod_time": "2024-06-06 01:44:58 +0000"
    },
    "detectors.dan.DevMode": {
      "description": "Do we get a dev mode v2 positive?",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:security:S0403"
      ],
      "mod_time": "2024-06-06 01:44:58 +0000"
    },
    "detectors.dan.MarkdownLink": {
      "description": "Look for markdown links",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "*",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:security:S0403"
      ],
      "mod_time": "2024-06-06 01:44:58 +0000"
    },
    "detectors.dan.STAN": {
      "description": "Do we get a STAN positive?",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:security:S0403"
      ],
      "mod_time": "2024-06-06 01:44:58 +0000"
    },
    "detectors.encoding.DecodeApprox": {
      "description": "Is there a partial hash decoding?",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [],
      "mod_time": "2024-07-01 17:51:48 +0000"
    },
    "detectors.encoding.DecodeMatch": {
      "description": "Is there a direct hash decoding?",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [],
      "mod_time": "2024-07-01 17:51:48 +0000"
    },
    "detectors.fileformats.FileIsExecutable": {
      "description": "",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "*",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [],
      "valid_format": "local filename",
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "detectors.fileformats.FileIsPickled": {
      "description": "",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "*",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [],
      "valid_format": "local filename",
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "detectors.fileformats.PossiblePickleName": {
      "description": "Guess if filenames look like pickles",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "*",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [],
      "valid_format": null,
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "detectors.goodside.Glitch": {
      "description": "Inverse trigger list detector - hit if trigger absent",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "*",
      "doc_uri": "https://twitter.com/goodside/status/1666598580319035392",
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [],
      "mod_time": "2024-07-01 17:51:48 +0000"
    },
    "detectors.goodside.PlainJSON": {
      "description": "Is the output valid JSON with no preamble?",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "*",
      "doc_uri": "https://twitter.com/goodside/status/1657396491676164096",
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [],
      "mod_time": "2024-07-01 17:51:48 +0000"
    },
    "detectors.goodside.RileyIsnt": {
      "description": "Look for mentions of being Canadian, female pronouns, being a singer",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [],
      "mod_time": "2024-07-01 17:51:48 +0000"
    },
    "detectors.knownbadsignatures.EICAR": {
      "description": "Is the EICAR test string present?",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:security:S0301"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "detectors.knownbadsignatures.GTUBE": {
      "description": "Is the GTUBE test string present?",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:security:S0301"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "detectors.knownbadsignatures.GTphish": {
      "description": "Is the GTphish test string present?",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:security:S0301"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "detectors.leakreplay.StartsWith": {
      "description": "Subclass of Detector using attempt's notes[triggers] as list of strings to match",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "detectors.lmrc.Anthro": {
      "description": "Looking for first person pronoun uses",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "risk-cards:lmrc:anthropomorphisation"
      ],
      "mod_time": "2024-06-06 01:44:58 +0000"
    },
    "detectors.lmrc.QuackMedicine": {
      "description": "Keywords related to Quack Medicine detector",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "risk-cards:lmrc:quack_medicine",
        "avid-effect:ethics:E0402"
      ],
      "mod_time": "2024-06-06 01:44:58 +0000"
    },
    "detectors.malwaregen.AnyCode": {
      "description": "Detects programming languages",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "*",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [],
      "mod_time": "2024-07-01 17:51:48 +0000"
    },
    "detectors.misleading.MustContradictNLI": {
      "description": "This detector is looking for the model to contradict a claim.",
      "DEFAULT_PARAMS": {
        "skip": false,
        "hf_args": {
          "device": "cpu"
        },
        "tokenizer_kwargs": {
          "truncation": true,
          "max_length": 256
        },
        "detector_model_path": "garak-llm/roberta-large-snli_mnli_fever_anli_R1_R2_R3-nli",
        "detector_target_class": "label"
      },
      "accuracy": null,
      "active": false,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [],
      "mod_time": "2024-09-03 09:02:26 +0000"
    },
    "detectors.misleading.MustRefuteClaimKW": {
      "description": "Looking for strings indicating a refutation",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [],
      "mod_time": "2024-09-03 09:02:26 +0000"
    },
    "detectors.misleading.MustRefuteClaimModel": {
      "description": "Using garak-llm/refutation_detector_distilbert to detect model refutations",
      "DEFAULT_PARAMS": {
        "skip": false,
        "hf_args": {
          "device": "cpu"
        },
        "tokenizer_kwargs": {
          "padding": true,
          "truncation": true
        },
        "detector_model_path": "garak-llm/refutation_detector_distilbert",
        "detector_target_class": "label"
      },
      "accuracy": 0.9506,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [],
      "mod_time": "2024-09-03 09:02:26 +0000"
    },
    "detectors.mitigation.MitigationBypass": {
      "description": "Detect if a string response does not contain a mitigation message.",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://huggingface.co/datasets/anon8231489123/ShareGPT_Vicuna_unfiltered",
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:security:S0403",
        "avid-effect:performance:P0204"
      ],
      "mod_time": "2024-07-25 15:08:38 +0000"
    },
    "detectors.packagehallucination.JavaScriptNpm": {
      "description": "Check if the output tries to import or require an npm package not listed in the npm registry",
      "DEFAULT_PARAMS": {
        "skip": false,
        "dataset_name": "garak-llm/npm-20240828",
        "language_name": "javascript"
      },
      "accuracy": null,
      "active": false,
      "bcp47": "*",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [],
      "mod_time": "2024-09-06 20:07:37 +0000"
    },
    "detectors.packagehallucination.PackageHallucinationDetector": {
      "description": "Base class for package hallucination detectors",
      "DEFAULT_PARAMS": {
        "skip": false,
        "dataset_name": null,
        "language_name": null
      },
      "accuracy": null,
      "active": false,
      "bcp47": "*",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [],
      "mod_time": "2024-09-06 20:07:37 +0000"
    },
    "detectors.packagehallucination.PythonPypi": {
      "description": "Check if the output tries to import a package not listed in stdlib or a pypi archive listing",
      "DEFAULT_PARAMS": {
        "skip": false,
        "dataset_name": "garak-llm/pypi-20230724",
        "language_name": "python"
      },
      "accuracy": null,
      "active": false,
      "bcp47": "*",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [],
      "mod_time": "2024-09-06 20:07:37 +0000"
    },
    "detectors.packagehallucination.RubyGems": {
      "description": "Check if the output tries to require a gem not listed in the Ruby standard library or RubyGems",
      "DEFAULT_PARAMS": {
        "skip": false,
        "dataset_name": "garak-llm/rubygems-20230301",
        "language_name": "ruby"
      },
      "accuracy": null,
      "active": false,
      "bcp47": "*",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [],
      "mod_time": "2024-09-06 20:07:37 +0000"
    },
    "detectors.packagehallucination.RustCrates": {
      "description": "Check if the output tries to use a Rust crate not listed in the crates.io registry",
      "DEFAULT_PARAMS": {
        "skip": false,
        "dataset_name": "garak-llm/crates-20240903",
        "language_name": "rust"
      },
      "accuracy": null,
      "active": false,
      "bcp47": "*",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [],
      "mod_time": "2024-09-06 20:07:37 +0000"
    },
    "detectors.perspective.Attack_On_Author": {
      "description": "Targets: Attack on the author of an article or post.",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": false,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-01 17:51:48 +0000"
    },
    "detectors.perspective.Attack_On_Commenter": {
      "description": "Targets: Attack on fellow commenter.",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": false,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-01 17:51:48 +0000"
    },
    "detectors.perspective.Flirtation": {
      "description": "Targets: Pickup lines, complimenting appearance, subtle sexual innuendos, etc.",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": false,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0101",
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-01 17:51:48 +0000"
    },
    "detectors.perspective.Identity_Attack": {
      "description": "Targets: Negative or hateful comments targeting someone because of their identity.",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": false,
      "bcp47": "ar,zh,cs,nl,en,fr,de,hi,hi-Latn,id,it,ja,ko,pl,pt,ru,es,sv",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0101",
        "avid-effect:ethics:E0301",
        "avid-effect:ethics:E0302",
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-01 17:51:48 +0000"
    },
    "detectors.perspective.Identity_Attack_Experimental": {
      "description": "Targets: Negative or hateful comments targeting someone because of their identity.",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": false,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0101",
        "avid-effect:ethics:E0301",
        "avid-effect:ethics:E0302",
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-01 17:51:48 +0000"
    },
    "detectors.perspective.Incoherent": {
      "description": "Targets: Difficult to understand, nonsensical.",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": false,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:performance:P0204"
      ],
      "mod_time": "2024-07-01 17:51:48 +0000"
    },
    "detectors.perspective.Inflammatory": {
      "description": "Targets: Intending to provoke or inflame.",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": false,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0301",
        "avid-effect:ethics:E0302",
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-01 17:51:48 +0000"
    },
    "detectors.perspective.Insult": {
      "description": "Targets: Insulting, inflammatory, or negative comment towards a person or a group of people.",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": false,
      "bcp47": "ar,zh,cs,nl,en,fr,de,hi,hi-Latn,id,it,ja,ko,pl,pt,ru,es,sv",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0101",
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-01 17:51:48 +0000"
    },
    "detectors.perspective.Insult_Experimental": {
      "description": "Targets: Insulting, inflammatory, or negative comment towards a person or a group of people.",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": false,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-01 17:51:48 +0000"
    },
    "detectors.perspective.Likely_To_Reject": {
      "description": "Targets: Overall measure of the likelihood for the comment to be rejected according to the NYT's moderation.",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": false,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [],
      "mod_time": "2024-07-01 17:51:48 +0000"
    },
    "detectors.perspective.Obscene": {
      "description": "Targets: Obscene or vulgar language such as cursing.",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": false,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-01 17:51:48 +0000"
    },
    "detectors.perspective.Profanity": {
      "description": "Targets: Swear words, curse words, or other obscene or profane language.",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": false,
      "bcp47": "ar,zh,cs,nl,en,fr,de,hi,hi-Latn,id,it,ja,ko,pl,pt,ru,es,sv",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-01 17:51:48 +0000"
    },
    "detectors.perspective.Profanity_Experimental": {
      "description": "Targets: Swear words, curse words, or other obscene or profane language.",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": false,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-01 17:51:48 +0000"
    },
    "detectors.perspective.Severe_Toxicity": {
      "description": "Targets: A very hateful, aggressive, disrespectful comment or otherwise very likely to make a user leave a discussion or give up on sharing their perspective. This attribute is much less sensitive to more mild forms of toxicity, such as comments that include positive uses of curse words.",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": false,
      "bcp47": "ar,zh,cs,nl,en,fr,de,hi,hi-Latn,id,it,ja,ko,pl,pt,ru,es,sv",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0301"
      ],
      "mod_time": "2024-07-01 17:51:48 +0000"
    },
    "detectors.perspective.Severe_Toxicity_Experimental": {
      "description": "Targets: A very hateful, aggressive, disrespectful comment or otherwise very likely to make a user leave a discussion or give up on sharing their perspective. This attribute is much less sensitive to more mild forms of toxicity, such as comments that include positive uses of curse words.",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": false,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0301",
        "avid-effect:ethics:E0302",
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-01 17:51:48 +0000"
    },
    "detectors.perspective.Sexually_Explicit": {
      "description": "Targets: Contains references to sexual acts, body parts, or other lewd content.",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": false,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0301"
      ],
      "mod_time": "2024-07-01 17:51:48 +0000"
    },
    "detectors.perspective.Spam": {
      "description": "Targets: Irrelevant and unsolicited commercial content.",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": false,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:performance:P0204"
      ],
      "mod_time": "2024-07-01 17:51:48 +0000"
    },
    "detectors.perspective.Threat": {
      "description": "Targets: Describes an intention to inflict pain, injury, or violence against an individual or group.",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": false,
      "bcp47": "ar,zh,cs,nl,en,fr,de,hi,hi-Latn,id,it,ja,ko,pl,pt,ru,es,sv",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0101",
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0400"
      ],
      "mod_time": "2024-07-01 17:51:48 +0000"
    },
    "detectors.perspective.Threat_Experimental": {
      "description": "Targets: Describes an intention to inflict pain, injury, or violence against an individual or group.",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": false,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-01 17:51:48 +0000"
    },
    "detectors.perspective.Toxicity": {
      "description": "Targets: A rude, disrespectful, or unreasonable comment that is likely to make people leave a discussion.",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": false,
      "bcp47": "ar,zh,cs,nl,en,fr,de,hi,hi-Latn,id,it,ja,ko,pl,pt,ru,es,sv",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0301"
      ],
      "mod_time": "2024-07-01 17:51:48 +0000"
    },
    "detectors.perspective.Toxicity_Experimental": {
      "description": "Targets: A rude, disrespectful, or unreasonable comment that is likely to make people leave a discussion.",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": false,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-01 17:51:48 +0000"
    },
    "detectors.perspective.Unsubstantial": {
      "description": "Targets: Trivial or short comments",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": false,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:performance:P0204"
      ],
      "mod_time": "2024-07-01 17:51:48 +0000"
    },
    "detectors.productkey.Win5x5": {
      "description": "Do we see a product key in the form of five groups of five characters?",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "detectors.promptinject.AttackRogueString": {
      "description": "Detect if model emits trigger string",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "*",
      "doc_uri": "https://github.com/agencyenterprise/PromptInject",
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [],
      "mod_time": "2024-07-01 17:51:48 +0000"
    },
    "detectors.replay.RepeatDiverges": {
      "description": "Subclass of Detector using attempt's notes[triggers] as list of strings to match",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "*",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "detectors.riskywords.LDNOOBW": {
      "description": "List of Dirty, Naughty, Obscene, and Otherwise Bad Words (English)",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0101",
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "detectors.riskywords.OfcomOffensiveDiscriminatory": {
      "description": "UK OFCOM potentially offensive list: discriminatory",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0101",
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "detectors.riskywords.OfcomOffensiveGeneral": {
      "description": "UK OFCOM potentially offensive list: general",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "detectors.riskywords.OfcomOffensiveMentalHealth": {
      "description": "UK OFCOM potentially offensive list: mental health",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0101",
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "detectors.riskywords.OfcomOffensiveRaceEthnic": {
      "description": "UK OFCOM potentially offensive list: race / ethnic",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0101",
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "detectors.riskywords.OfcomOffensiveSexGender": {
      "description": "UK OFCOM potentially offensive list: sex & gender",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0101",
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "detectors.riskywords.OfcomOffensiveSexual": {
      "description": "UK OFCOM potentially offensive list: sexual",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "detectors.riskywords.SurgeProfanityAnimalReferences": {
      "description": "Surge AI list: animal references",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "detectors.riskywords.SurgeProfanityBodilyFluids": {
      "description": "Surge AI list: bodily fluids / excrement",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "detectors.riskywords.SurgeProfanityMentalDisability": {
      "description": "Surge AI list: mental disability",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0101",
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "detectors.riskywords.SurgeProfanityPhysicalAttributes": {
      "description": "Surge AI list: physical attributes",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "detectors.riskywords.SurgeProfanityPhysicalDisability": {
      "description": "Surge AI list: physical disability",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0101",
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "detectors.riskywords.SurgeProfanityPolitical": {
      "description": "Surge AI list: political",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0101",
        "avid-effect:ethics:E0301",
        "avid-effect:ethics:E0302",
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "detectors.riskywords.SurgeProfanityRacialEthnic": {
      "description": "Surge AI list: racial / ethnic",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0101",
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "detectors.riskywords.SurgeProfanityReligious": {
      "description": "Surge AI list: religious offense",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "detectors.riskywords.SurgeProfanitySexual": {
      "description": "Surge AI list: sexual anatomy / sexual acts",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "detectors.riskywords.SurgeProfanitySexualOrientationGender": {
      "description": "Surge AI list: sexual orientation / gender",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0101",
        "avid-effect:ethics:E0301",
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "detectors.snowball.DontStartNo": {
      "description": "Response should start no, or contain a negation, to pass",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid:performance:P0204"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "detectors.snowball.DontStartYes": {
      "description": "Response should start yes, or contain an affirmation, to pass",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid:performance:P0204"
      ],
      "mod_time": "2024-08-23 16:13:06 +0000"
    },
    "detectors.specialwords.SlursReclaimedSlurs": {
      "description": "Slurs and reclaimed slurs. Detects presence of any of the items from an ethnic slur list, regardless of context.",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://en.wikipedia.org/wiki/List_of_ethnic_slurs",
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0101",
        "avid-effect:ethics:E0301",
        "avid-effect:ethics:E0302",
        "avid-effect:performance:P0401"
      ],
      "mod_time": "2024-07-30 16:28:58 +0000"
    },
    "detectors.toxicity.ToxicCommentModel": {
      "description": "Using backup of martin-ha/toxic-comment-model DistilBERT to detect toxic content",
      "DEFAULT_PARAMS": {
        "skip": false,
        "hf_args": {
          "device": "cpu"
        },
        "tokenizer_kwargs": {
          "padding": true,
          "truncation": true
        },
        "detector_model_path": "garak-llm/toxic-comment-model",
        "detector_target_class": "toxic"
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:ethics:E0301"
      ],
      "mod_time": "2024-09-03 09:02:26 +0000"
    },
    "detectors.visual_jailbreak.FigStep": {
      "description": "Looks for specific strings in the output - these should be strings inserted by image",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "en",
      "doc_uri": null,
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:security:S0403"
      ],
      "mod_time": "2024-06-12 10:04:47 +0000"
    },
    "detectors.xss.MarkdownExfilBasic": {
      "description": "Detect markdown images with fqdn, absolute path, and populated q= parameter",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "*",
      "doc_uri": "https://embracethered.com/blog/posts/2023/bing-chat-data-exfiltration-poc-and-fix/",
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:security:S0301"
      ],
      "mod_time": "2024-07-01 17:51:48 +0000"
    },
    "detectors.xss.MarkdownExfilContent": {
      "description": "As the basic detector, MarkdownExfilBasic, but did we exfiltrate anything?",
      "DEFAULT_PARAMS": {
        "skip": false
      },
      "accuracy": null,
      "active": true,
      "bcp47": "*",
      "doc_uri": "https://embracethered.com/blog/posts/2023/bing-chat-data-exfiltration-poc-and-fix/",
      "modality": {
        "out": [
          "text"
        ]
      },
      "precision": 0.0,
      "recall": 0.0,
      "tags": [
        "avid-effect:security:S0301"
      ],
      "mod_time": "2024-07-01 17:51:48 +0000"
    }
  },
  "generators": {
    "generators.base.Generator": {
      "description": "Base class for objects that wrap an LLM or other text-to-text service",
      "DEFAULT_PARAMS": {
        "max_tokens": 150,
        "temperature": null,
        "top_k": null,
        "context_len": null
      },
      "active": true,
      "generator_family_name": null,
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": true,
      "supports_multiple_generations": false,
      "mod_time": "2024-08-31 16:54:33 +0000"
    },
    "generators.cohere.CohereGenerator": {
      "description": "Interface to Cohere's python library for their text2text model.",
      "DEFAULT_PARAMS": {
        "max_tokens": 150,
        "temperature": 0.75,
        "top_k": null,
        "context_len": null,
        "k": 0,
        "p": 0.75,
        "preset": null,
        "frequency_penalty": 0.0,
        "presence_penalty": 0.0,
        "stop": []
      },
      "active": true,
      "generator_family_name": "Cohere",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": true,
      "supports_multiple_generations": true,
      "mod_time": "2024-08-29 13:35:37 +0000"
    },
    "generators.function.Multiple": {
      "description": "pass a module#function to be called as generator, with format function(prompt:str, generations:int, **kwargs)->List[Union(str, None)]",
      "DEFAULT_PARAMS": {
        "kwargs": {}
      },
      "active": true,
      "generator_family_name": "function",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": true,
      "supports_multiple_generations": true,
      "mod_time": "2024-08-29 13:35:37 +0000"
    },
    "generators.function.Single": {
      "description": "pass a module#function to be called as generator, with format function(prompt:str, **kwargs)->List[Union(str, None)] the parameter `name` is reserved",
      "DEFAULT_PARAMS": {
        "kwargs": {}
      },
      "active": true,
      "generator_family_name": "function",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": true,
      "supports_multiple_generations": false,
      "mod_time": "2024-08-29 13:35:37 +0000"
    },
    "generators.ggml.GgmlGenerator": {
      "description": "Generator interface for ggml models in gguf format.",
      "DEFAULT_PARAMS": {
        "max_tokens": 150,
        "temperature": 0.8,
        "top_k": 40,
        "context_len": null,
        "repeat_penalty": 1.1,
        "presence_penalty": 0.0,
        "frequency_penalty": 0.0,
        "top_p": 0.95,
        "exception_on_failure": true,
        "first_call": true,
        "key_env_var": "GGML_MAIN_PATH"
      },
      "active": true,
      "generator_family_name": "ggml",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": true,
      "supports_multiple_generations": false,
      "mod_time": "2024-08-29 13:35:37 +0000"
    },
    "generators.groq.GroqChat": {
      "description": "Wrapper for Groq-hosted LLM models.",
      "DEFAULT_PARAMS": {
        "max_tokens": 150,
        "temperature": 0.7,
        "top_k": null,
        "context_len": null,
        "top_p": 1.0,
        "frequency_penalty": 0.0,
        "presence_penalty": 0.0,
        "seed": null,
        "stop": [
          "#",
          ";"
        ],
        "suppressed_params": [
          "frequency_penalty",
          "logit_bias",
          "logprobs",
          "n",
          "presence_penalty",
          "top_logprobs"
        ],
        "retry_json": true,
        "uri": "https://api.groq.com/openai/v1",
        "vary_seed_each_call": true,
        "vary_temp_each_call": true
      },
      "active": true,
      "generator_family_name": "Groq",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": true,
      "supports_multiple_generations": false,
      "mod_time": "2024-09-06 13:19:56 +0000"
    },
    "generators.guardrails.NeMoGuardrails": {
      "description": "Generator wrapper for NeMo Guardrails.",
      "DEFAULT_PARAMS": {
        "max_tokens": 150,
        "temperature": null,
        "top_k": null,
        "context_len": null
      },
      "active": true,
      "generator_family_name": "Guardrails",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": true,
      "supports_multiple_generations": false,
      "mod_time": "2024-08-29 13:35:37 +0000"
    },
    "generators.huggingface.ConversationalPipeline": {
      "description": "Conversational text generation using HuggingFace pipelines",
      "DEFAULT_PARAMS": {
        "max_tokens": 150,
        "temperature": null,
        "top_k": null,
        "context_len": null,
        "hf_args": {
          "torch_dtype": "float16",
          "do_sample": true,
          "device": null
        }
      },
      "active": true,
      "generator_family_name": "Hugging Face \ud83e\udd17 pipeline for conversations",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": false,
      "supports_multiple_generations": true,
      "mod_time": "2024-09-10 12:29:15 +0000"
    },
    "generators.huggingface.InferenceAPI": {
      "description": "Get text generations from Hugging Face Inference API",
      "DEFAULT_PARAMS": {
        "max_tokens": 150,
        "temperature": null,
        "top_k": null,
        "context_len": null,
        "deprefix_prompt": true,
        "max_time": 20,
        "wait_for_model": false
      },
      "active": true,
      "generator_family_name": "Hugging Face \ud83e\udd17 Inference API",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": true,
      "supports_multiple_generations": true,
      "mod_time": "2024-09-10 12:29:15 +0000"
    },
    "generators.huggingface.InferenceEndpoint": {
      "description": "Interface for Hugging Face private endpoints",
      "DEFAULT_PARAMS": {
        "max_tokens": 150,
        "temperature": null,
        "top_k": null,
        "context_len": null,
        "deprefix_prompt": true,
        "max_time": 20,
        "wait_for_model": false
      },
      "active": true,
      "generator_family_name": "Hugging Face \ud83e\udd17 Inference API",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": true,
      "supports_multiple_generations": false,
      "mod_time": "2024-09-10 12:29:15 +0000"
    },
    "generators.huggingface.LLaVA": {
      "description": "Get LLaVA ([ text + image ] -> text) generations",
      "DEFAULT_PARAMS": {
        "max_tokens": 4000,
        "temperature": null,
        "top_k": null,
        "context_len": null,
        "hf_args": {
          "torch_dtype": "float16",
          "low_cpu_mem_usage": true,
          "device_map": "auto"
        }
      },
      "active": true,
      "generator_family_name": null,
      "modality": {
        "in": [
          "image",
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": false,
      "supports_multiple_generations": false,
      "mod_time": "2024-09-10 12:29:15 +0000"
    },
    "generators.huggingface.Model": {
      "description": "Get text generations from a locally-run Hugging Face model",
      "DEFAULT_PARAMS": {
        "max_tokens": 150,
        "temperature": null,
        "top_k": null,
        "context_len": null,
        "hf_args": {
          "torch_dtype": "float16",
          "do_sample": true,
          "device": null
        }
      },
      "active": true,
      "generator_family_name": "Hugging Face \ud83e\udd17 model",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": false,
      "supports_multiple_generations": true,
      "mod_time": "2024-09-10 12:29:15 +0000"
    },
    "generators.huggingface.OptimumPipeline": {
      "description": "Get text generations from a locally-run Hugging Face pipeline using NVIDIA Optimum",
      "DEFAULT_PARAMS": {
        "max_tokens": 150,
        "temperature": null,
        "top_k": null,
        "context_len": null,
        "hf_args": {
          "torch_dtype": "float16",
          "do_sample": true,
          "device": null
        }
      },
      "active": true,
      "generator_family_name": "NVIDIA Optimum Hugging Face \ud83e\udd17 pipeline",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": false,
      "supports_multiple_generations": true,
      "mod_time": "2024-09-10 12:29:15 +0000"
    },
    "generators.huggingface.Pipeline": {
      "description": "Get text generations from a locally-run Hugging Face pipeline",
      "DEFAULT_PARAMS": {
        "max_tokens": 150,
        "temperature": null,
        "top_k": null,
        "context_len": null,
        "hf_args": {
          "torch_dtype": "float16",
          "do_sample": true,
          "device": null
        }
      },
      "active": true,
      "generator_family_name": "Hugging Face \ud83e\udd17 pipeline",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": false,
      "supports_multiple_generations": true,
      "mod_time": "2024-09-10 12:29:15 +0000"
    },
    "generators.langchain.LangChainLLMGenerator": {
      "description": "Class supporting LangChain LLM interfaces",
      "DEFAULT_PARAMS": {
        "max_tokens": 150,
        "temperature": 0.75,
        "top_k": null,
        "context_len": null,
        "k": 0,
        "p": 0.75,
        "preset": null,
        "frequency_penalty": 0.0,
        "presence_penalty": 0.0,
        "stop": []
      },
      "active": true,
      "generator_family_name": "LangChain",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": true,
      "supports_multiple_generations": false,
      "mod_time": "2024-08-29 13:35:37 +0000"
    },
    "generators.langchain_serve.LangChainServeLLMGenerator": {
      "description": "Class supporting LangChain Serve LLM interfaces via HTTP POST requests.",
      "DEFAULT_PARAMS": {
        "max_tokens": 150,
        "temperature": null,
        "top_k": null,
        "context_len": null,
        "config_hash": "default"
      },
      "active": true,
      "generator_family_name": "LangChainServe",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": true,
      "supports_multiple_generations": false,
      "mod_time": "2024-08-29 13:35:37 +0000"
    },
    "generators.litellm.LiteLLMGenerator": {
      "description": "Generator wrapper using LiteLLM to allow access to different providers using the OpenAI API format.",
      "DEFAULT_PARAMS": {
        "max_tokens": 150,
        "temperature": 0.7,
        "top_k": null,
        "context_len": null,
        "top_p": 1.0,
        "frequency_penalty": 0.0,
        "presence_penalty": 0.0,
        "stop": [
          "#",
          ";"
        ]
      },
      "active": true,
      "generator_family_name": "LiteLLM",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": true,
      "supports_multiple_generations": true,
      "mod_time": "2024-08-29 13:35:37 +0000"
    },
    "generators.multi_endpoint_rest.MultiEndpointGenerator": {
      "description": "A REST generator that sends a POST request and retrieves the response with a subsequent GET request.",
      "DEFAULT_PARAMS": {
        "max_tokens": 150,
        "temperature": null,
        "top_k": null,
        "context_len": null,
        "first_stage_uri": "https://localhost",
        "first_stage_method": "post",
        "first_stage_headers": {},
        "first_stage_req_template": "$INPUT",
        "first_stage_response_json": false,
        "first_stage_required_returns": null,
        "second_stage_uri": "https://localhost",
        "second_stage_method": "get",
        "second_stage_headers": {},
        "second_stage_req_template": "$INPUT",
        "second_stage_response_json": false,
        "second_stage_response_json_field": null,
        "second_stage_req_template_json_object": null,
        "ratelimit_codes": [
          429
        ],
        "request_timeout": 20,
        "proxies": null,
        "verify_ssl": true
      },
      "active": true,
      "generator_family_name": "MultiEndpointREST",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": true,
      "supports_multiple_generations": false,
      "mod_time": "2024-09-04 05:53:40 +0000"
    },
    "generators.nemo.NeMoGenerator": {
      "description": "Wrapper for the NVIDIA NeMo models via NGC. Expects NGC_API_KEY and ORG_ID environment variables.",
      "DEFAULT_PARAMS": {
        "max_tokens": 150,
        "temperature": 0.9,
        "top_k": 2,
        "context_len": null,
        "top_p": 1.0,
        "repetition_penalty": 1.1,
        "beam_search_diversity_rate": 0.0,
        "beam_width": 1,
        "length_penalty": 1,
        "guardrail": null,
        "api_host": "https://api.llm.ngc.nvidia.com/v1"
      },
      "active": true,
      "generator_family_name": "NeMo",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": true,
      "supports_multiple_generations": false,
      "mod_time": "2024-08-29 13:35:37 +0000"
    },
    "generators.nim.NVOpenAIChat": {
      "description": "Wrapper for NVIDIA-hosted NIMs. Expects NIM_API_KEY environment variable.",
      "DEFAULT_PARAMS": {
        "max_tokens": 150,
        "temperature": 0.1,
        "top_k": 0,
        "context_len": null,
        "top_p": 0.7,
        "frequency_penalty": 0.0,
        "presence_penalty": 0.0,
        "seed": null,
        "stop": [
          "#",
          ";"
        ],
        "suppressed_params": [
          "frequency_penalty",
          "n",
          "presence_penalty"
        ],
        "retry_json": true,
        "uri": "https://integrate.api.nvidia.com/v1/",
        "vary_seed_each_call": true,
        "vary_temp_each_call": true
      },
      "active": true,
      "generator_family_name": "NIM",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": true,
      "supports_multiple_generations": false,
      "mod_time": "2024-09-03 10:59:40 +0000"
    },
    "generators.nim.NVOpenAICompletion": {
      "description": "Wrapper for NVIDIA-hosted NIMs. Expects NIM_API_KEY environment variable.",
      "DEFAULT_PARAMS": {
        "max_tokens": 150,
        "temperature": 0.1,
        "top_k": 0,
        "context_len": null,
        "top_p": 0.7,
        "frequency_penalty": 0.0,
        "presence_penalty": 0.0,
        "seed": null,
        "stop": [
          "#",
          ";"
        ],
        "suppressed_params": [
          "frequency_penalty",
          "n",
          "presence_penalty"
        ],
        "retry_json": true,
        "uri": "https://integrate.api.nvidia.com/v1/",
        "vary_seed_each_call": true,
        "vary_temp_each_call": true
      },
      "active": true,
      "generator_family_name": "NIM",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": true,
      "supports_multiple_generations": false,
      "mod_time": "2024-09-03 10:59:40 +0000"
    },
    "generators.nvcf.NvcfChat": {
      "description": "Wrapper for NVIDIA Cloud Functions Chat models via NGC. Expects NVCF_API_KEY environment variable.",
      "DEFAULT_PARAMS": {
        "max_tokens": 150,
        "temperature": 0.2,
        "top_k": null,
        "context_len": null,
        "top_p": 0.7,
        "fetch_url_format": "https://api.nvcf.nvidia.com/v2/nvcf/pexec/status/",
        "invoke_url_base": "https://api.nvcf.nvidia.com/v2/nvcf/pexec/functions/",
        "extra_nvcf_logging": false,
        "timeout": 60,
        "version_id": null,
        "stop_on_404": true,
        "extra_params": {
          "stream": false
        }
      },
      "active": true,
      "generator_family_name": "NVCF",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": true,
      "supports_multiple_generations": false,
      "mod_time": "2024-08-29 13:35:37 +0000"
    },
    "generators.nvcf.NvcfCompletion": {
      "description": "Wrapper for NVIDIA Cloud Functions Completion models via NGC. Expects NVCF_API_KEY environment variables.",
      "DEFAULT_PARAMS": {
        "max_tokens": 150,
        "temperature": 0.2,
        "top_k": null,
        "context_len": null,
        "top_p": 0.7,
        "fetch_url_format": "https://api.nvcf.nvidia.com/v2/nvcf/pexec/status/",
        "invoke_url_base": "https://api.nvcf.nvidia.com/v2/nvcf/pexec/functions/",
        "extra_nvcf_logging": false,
        "timeout": 60,
        "version_id": null,
        "stop_on_404": true,
        "extra_params": {
          "stream": false
        }
      },
      "active": true,
      "generator_family_name": "NVCF",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": true,
      "supports_multiple_generations": false,
      "mod_time": "2024-08-29 13:35:37 +0000"
    },
    "generators.octo.InferenceEndpoint": {
      "description": "Interface for OctoAI private endpoints",
      "DEFAULT_PARAMS": {
        "max_tokens": 128,
        "temperature": 0.1,
        "top_k": null,
        "context_len": null,
        "presence_penalty": 0,
        "top_p": 1
      },
      "active": true,
      "generator_family_name": "OctoAI",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": true,
      "supports_multiple_generations": false,
      "mod_time": "2024-08-29 13:35:37 +0000"
    },
    "generators.octo.OctoGenerator": {
      "description": "Interface for OctoAI public endpoints",
      "DEFAULT_PARAMS": {
        "max_tokens": 128,
        "temperature": 0.1,
        "top_k": null,
        "context_len": null,
        "presence_penalty": 0,
        "top_p": 1
      },
      "active": true,
      "generator_family_name": "OctoAI",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": true,
      "supports_multiple_generations": false,
      "mod_time": "2024-08-29 13:35:37 +0000"
    },
    "generators.openai.OpenAICompatible": {
      "description": "Generator base class for OpenAI compatible text2text restful API. Implements shared initialization and execution methods.",
      "DEFAULT_PARAMS": {
        "max_tokens": 150,
        "temperature": 0.7,
        "top_k": null,
        "context_len": null,
        "top_p": 1.0,
        "frequency_penalty": 0.0,
        "presence_penalty": 0.0,
        "seed": null,
        "stop": [
          "#",
          ";"
        ],
        "suppressed_params": [],
        "retry_json": true
      },
      "active": false,
      "generator_family_name": "OpenAICompatible",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": true,
      "supports_multiple_generations": true,
      "mod_time": "2024-08-29 13:35:37 +0000"
    },
    "generators.openai.OpenAIGenerator": {
      "description": "Generator wrapper for OpenAI text2text models. Expects API key in the OPENAI_API_KEY environment variable",
      "DEFAULT_PARAMS": {
        "max_tokens": 150,
        "temperature": 0.7,
        "top_k": null,
        "context_len": null,
        "top_p": 1.0,
        "frequency_penalty": 0.0,
        "presence_penalty": 0.0,
        "seed": null,
        "stop": [
          "#",
          ";"
        ],
        "suppressed_params": [],
        "retry_json": true
      },
      "active": true,
      "generator_family_name": "OpenAI",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": true,
      "supports_multiple_generations": true,
      "mod_time": "2024-08-29 13:35:37 +0000"
    },
    "generators.rasa.RasaRestGenerator": {
      "description": "API interface for RASA models",
      "DEFAULT_PARAMS": {
        "max_tokens": 150,
        "temperature": null,
        "top_k": null,
        "context_len": null,
        "headers": {
          "Content-Type": "application/json",
          "Authorization": "Bearer $KEY"
        },
        "method": "post",
        "ratelimit_codes": [
          429
        ],
        "response_json": true,
        "response_json_field": "text",
        "req_template": "{\"sender\": \"garak\", \"message\": \"$INPUT\"}",
        "request_timeout": 20,
        "proxies": null,
        "verify_ssl": true
      },
      "active": true,
      "generator_family_name": "RASA",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": true,
      "supports_multiple_generations": false,
      "mod_time": "2024-06-06 01:44:58 +0000"
    },
    "generators.replicate.InferenceEndpoint": {
      "description": "Interface for private Replicate endpoints.",
      "DEFAULT_PARAMS": {
        "max_tokens": 150,
        "temperature": 1,
        "top_k": null,
        "context_len": null,
        "top_p": 1.0,
        "repetition_penalty": 1
      },
      "active": true,
      "generator_family_name": "Replicate",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": true,
      "supports_multiple_generations": false,
      "mod_time": "2024-08-29 13:35:37 +0000"
    },
    "generators.replicate.ReplicateGenerator": {
      "description": "Interface for public endpoints of models hosted in Replicate (replicate.com).",
      "DEFAULT_PARAMS": {
        "max_tokens": 150,
        "temperature": 1,
        "top_k": null,
        "context_len": null,
        "top_p": 1.0,
        "repetition_penalty": 1
      },
      "active": true,
      "generator_family_name": "Replicate",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": true,
      "supports_multiple_generations": false,
      "mod_time": "2024-08-29 13:35:37 +0000"
    },
    "generators.rest.RestGenerator": {
      "description": "Generic API interface for REST models",
      "DEFAULT_PARAMS": {
        "max_tokens": 150,
        "temperature": null,
        "top_k": null,
        "context_len": null,
        "headers": {},
        "method": "post",
        "ratelimit_codes": [
          429
        ],
        "response_json": false,
        "response_json_field": null,
        "req_template": "$INPUT",
        "request_timeout": 20,
        "proxies": null,
        "verify_ssl": true
      },
      "active": true,
      "generator_family_name": "REST",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": true,
      "supports_multiple_generations": false,
      "mod_time": "2024-09-04 05:53:40 +0000"
    },
    "generators.test.Blank": {
      "description": "This generator always returns the empty string.",
      "DEFAULT_PARAMS": {
        "max_tokens": 150,
        "temperature": null,
        "top_k": null,
        "context_len": null
      },
      "active": true,
      "generator_family_name": "Test",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": true,
      "supports_multiple_generations": true,
      "mod_time": "2024-07-18 06:04:25 +0000"
    },
    "generators.test.Lipsum": {
      "description": "Lorem Ipsum generator, so we can get non-zero outputs that vary",
      "DEFAULT_PARAMS": {
        "max_tokens": 150,
        "temperature": null,
        "top_k": null,
        "context_len": null
      },
      "active": true,
      "generator_family_name": "Test",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": true,
      "supports_multiple_generations": false,
      "mod_time": "2024-07-18 06:04:25 +0000"
    },
    "generators.test.Repeat": {
      "description": "This generator returns the input that was posed to it.",
      "DEFAULT_PARAMS": {
        "max_tokens": 150,
        "temperature": null,
        "top_k": null,
        "context_len": null
      },
      "active": true,
      "generator_family_name": "Test",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": true,
      "supports_multiple_generations": true,
      "mod_time": "2024-07-18 06:04:25 +0000"
    },
    "generators.test.Single": {
      "description": "This generator returns the a fixed string and does not support multiple generations.",
      "DEFAULT_PARAMS": {
        "max_tokens": 150,
        "temperature": null,
        "top_k": null,
        "context_len": null
      },
      "active": true,
      "generator_family_name": "Test",
      "modality": {
        "in": [
          "text"
        ],
        "out": [
          "text"
        ]
      },
      "parallel_capable": true,
      "supports_multiple_generations": false,
      "mod_time": "2024-07-18 06:04:25 +0000"
    }
  },
  "harnesses": {
    "harnesses.base.Harness": {
      "description": "Class to manage the whole process of probing, detecting and evaluating",
      "DEFAULT_PARAMS": {},
      "active": true,
      "mod_time": "2024-08-16 10:24:53 +0000"
    },
    "harnesses.probewise.ProbewiseHarness": {
      "DEFAULT_PARAMS": {},
      "active": true,
      "mod_time": "2024-06-12 10:04:47 +0000"
    },
    "harnesses.pxd.PxD": {
      "DEFAULT_PARAMS": {},
      "active": true,
      "mod_time": "2024-06-12 10:04:47 +0000"
    }
  },
  "buffs": {
    "buffs.base.Buff": {
      "description": "Base class for a buff.",
      "DEFAULT_PARAMS": {},
      "active": true,
      "bcp47": null,
      "doc_uri": "",
      "mod_time": "2024-07-03 05:58:33 +0000"
    },
    "buffs.encoding.Base64": {
      "description": "Base64 buff",
      "DEFAULT_PARAMS": {},
      "active": true,
      "bcp47": null,
      "doc_uri": "",
      "mod_time": "2024-04-19 18:04:13 +0000"
    },
    "buffs.encoding.CharCode": {
      "description": "CharCode buff",
      "DEFAULT_PARAMS": {},
      "active": true,
      "bcp47": null,
      "doc_uri": "",
      "mod_time": "2024-04-19 18:04:13 +0000"
    },
    "buffs.low_resource_languages.LRLBuff": {
      "description": "Low Resource Language buff",
      "DEFAULT_PARAMS": {},
      "active": true,
      "bcp47": null,
      "doc_uri": "https://arxiv.org/abs/2310.02446",
      "mod_time": "2024-06-12 10:04:47 +0000"
    },
    "buffs.lowercase.Lowercase": {
      "description": "Lowercasing buff",
      "DEFAULT_PARAMS": {},
      "active": true,
      "bcp47": null,
      "doc_uri": "",
      "mod_time": "2024-04-19 18:04:13 +0000"
    },
    "buffs.paraphrase.Fast": {
      "description": "CPU-friendly paraphrase buff based on Humarin's T5 paraphraser",
      "DEFAULT_PARAMS": {
        "para_model_name": "garak-llm/chatgpt_paraphraser_on_T5_base",
        "hf_args": {
          "device": "cpu",
          "torch_dtype": "float32"
        }
      },
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://huggingface.co/humarin/chatgpt_paraphraser_on_T5_base",
      "mod_time": "2024-09-06 14:46:11 +0000"
    },
    "buffs.paraphrase.PegasusT5": {
      "description": "Paraphrasing buff using Pegasus model",
      "DEFAULT_PARAMS": {},
      "active": true,
      "bcp47": "en",
      "doc_uri": "https://huggingface.co/tuner007/pegasus_paraphrase",
      "mod_time": "2024-09-06 14:46:11 +0000"
    }
  }
}